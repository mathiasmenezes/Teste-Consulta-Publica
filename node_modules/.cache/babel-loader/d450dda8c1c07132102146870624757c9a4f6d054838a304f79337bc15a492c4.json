{"ast":null,"code":"import { openDB } from 'idb';\nimport { v4 as uuidv4 } from 'uuid';\nimport bcrypt from 'bcryptjs';\nclass DatabaseService {\n  constructor() {\n    this.db = null;\n    this.dbName = 'FormBuilderDB';\n    this.version = 1;\n    this.init();\n  }\n  async init() {\n    try {\n      this.db = await openDB(this.dbName, this.version, {\n        upgrade: db => {\n          // Users store\n          if (!db.objectStoreNames.contains('users')) {\n            const userStore = db.createObjectStore('users', {\n              keyPath: 'id'\n            });\n            userStore.createIndex('email', 'email', {\n              unique: true\n            });\n            userStore.createIndex('role', 'role');\n          }\n\n          // Forms store\n          if (!db.objectStoreNames.contains('forms')) {\n            const formStore = db.createObjectStore('forms', {\n              keyPath: 'id'\n            });\n            formStore.createIndex('created_by', 'created_by');\n            formStore.createIndex('is_active', 'is_active');\n          }\n\n          // Form responses store\n          if (!db.objectStoreNames.contains('form_responses')) {\n            const responseStore = db.createObjectStore('form_responses', {\n              keyPath: 'id'\n            });\n            responseStore.createIndex('form_id', 'form_id');\n            responseStore.createIndex('user_id', 'user_id');\n            responseStore.createIndex('form_user', ['form_id', 'user_id'], {\n              unique: true\n            });\n          }\n        }\n      });\n      await this.seedInitialData();\n    } catch (error) {\n      console.error('Database initialization error:', error);\n    }\n  }\n  async seedInitialData() {\n    try {\n      // Check if admin user already exists\n      const adminExists = await this.getUserByEmail('admin@example.com');\n      if (!adminExists) {\n        // Create admin user\n        const adminPassword = await bcrypt.hash('admin123', 10);\n        await this.createUser('admin@example.com', adminPassword, 'Admin User', 'admin');\n\n        // Create demo user\n        const userPassword = await bcrypt.hash('user123', 10);\n        await this.createUser('user@example.com', userPassword, 'Regular User', 'user');\n        await this.createUser('user2@example.com', userPassword, 'Another User', 'user');\n        console.log('Initial data seeded successfully');\n      }\n    } catch (error) {\n      console.error('Error seeding initial data:', error);\n    }\n  }\n\n  // User operations\n  async createUser(email, password, name, role = 'user') {\n    try {\n      const userId = uuidv4();\n      const user = {\n        id: userId,\n        email,\n        password,\n        name,\n        role,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      await this.db.add('users', user);\n      return {\n        success: true,\n        userId\n      };\n    } catch (error) {\n      if (error.name === 'ConstraintError') {\n        throw new Error('User already exists');\n      }\n      throw error;\n    }\n  }\n  async authenticateUser(email, password) {\n    try {\n      const user = await this.getUserByEmail(email);\n      if (!user) {\n        return null;\n      }\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return null;\n      }\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Authentication error:', error);\n      return null;\n    }\n  }\n  async getUserByEmail(email) {\n    try {\n      const tx = this.db.transaction('users', 'readonly');\n      const store = tx.objectStore('users');\n      const index = store.index('email');\n      return await index.get(email);\n    } catch (error) {\n      console.error('Get user by email error:', error);\n      return null;\n    }\n  }\n  async getUserById(userId) {\n    try {\n      return await this.db.get('users', userId);\n    } catch (error) {\n      console.error('Get user error:', error);\n      return null;\n    }\n  }\n  async getAllUsers() {\n    try {\n      return await this.db.getAll('users');\n    } catch (error) {\n      console.error('Get all users error:', error);\n      return [];\n    }\n  }\n\n  // Form operations\n  async createForm(formData, createdBy) {\n    try {\n      const formId = uuidv4();\n      const form = {\n        id: formId,\n        title: formData.title,\n        description: formData.description,\n        fields: formData.fields,\n        is_active: true,\n        created_by: createdBy,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      await this.db.add('forms', form);\n      return {\n        success: true,\n        formId\n      };\n    } catch (error) {\n      console.error('Create form error:', error);\n      throw error;\n    }\n  }\n  async updateForm(formId, formData) {\n    try {\n      const existingForm = await this.db.get('forms', formId);\n      if (!existingForm) {\n        throw new Error('Form not found');\n      }\n      const updatedForm = {\n        ...existingForm,\n        title: formData.title,\n        description: formData.description,\n        fields: formData.fields,\n        updated_at: new Date().toISOString()\n      };\n      await this.db.put('forms', updatedForm);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Update form error:', error);\n      throw error;\n    }\n  }\n  async deleteForm(formId) {\n    try {\n      await this.db.delete('forms', formId);\n      // Also delete all responses for this form\n      const responses = await this.getFormResponses(formId);\n      for (const response of responses) {\n        await this.db.delete('form_responses', response.id);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Delete form error:', error);\n      throw error;\n    }\n  }\n  async getFormById(formId) {\n    try {\n      return await this.db.get('forms', formId);\n    } catch (error) {\n      console.error('Get form error:', error);\n      return null;\n    }\n  }\n  async getAllForms() {\n    try {\n      return await this.db.getAll('forms');\n    } catch (error) {\n      console.error('Get all forms error:', error);\n      return [];\n    }\n  }\n  async getActiveForms() {\n    try {\n      const tx = this.db.transaction('forms', 'readonly');\n      const store = tx.objectStore('forms');\n      const index = store.index('is_active');\n      return await index.getAll(true);\n    } catch (error) {\n      console.error('Get active forms error:', error);\n      return [];\n    }\n  }\n\n  // Response operations\n  async submitResponse(formId, userId, responseData) {\n    try {\n      const responseId = uuidv4();\n      const response = {\n        id: responseId,\n        form_id: formId,\n        user_id: userId,\n        data: responseData,\n        submitted_at: new Date().toISOString()\n      };\n      await this.db.add('form_responses', response);\n      return {\n        success: true,\n        responseId\n      };\n    } catch (error) {\n      if (error.name === 'ConstraintError') {\n        throw new Error('You have already responded to this form');\n      }\n      console.error('Submit response error:', error);\n      throw error;\n    }\n  }\n  async getFormResponses(formId) {\n    try {\n      const tx = this.db.transaction('form_responses', 'readonly');\n      const store = tx.objectStore('form_responses');\n      const index = store.index('form_id');\n      const responses = await index.getAll(formId);\n\n      // Get user details for each response\n      const responsesWithUserData = await Promise.all(responses.map(async response => {\n        const user = await this.getUserById(response.user_id);\n        return {\n          ...response,\n          user_name: (user === null || user === void 0 ? void 0 : user.name) || `User ${response.user_id}`,\n          user_email: (user === null || user === void 0 ? void 0 : user.email) || ''\n        };\n      }));\n      return responsesWithUserData.sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at));\n    } catch (error) {\n      console.error('Get form responses error:', error);\n      return [];\n    }\n  }\n  async getUserResponses(userId) {\n    try {\n      const tx = this.db.transaction('form_responses', 'readonly');\n      const store = tx.objectStore('form_responses');\n      const index = store.index('user_id');\n      const responses = await index.getAll(userId);\n\n      // Get form details for each response\n      const responsesWithFormData = await Promise.all(responses.map(async response => {\n        const form = await this.getFormById(response.form_id);\n        return {\n          ...response,\n          form_title: (form === null || form === void 0 ? void 0 : form.title) || 'Unknown Form'\n        };\n      }));\n      return responsesWithFormData.sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at));\n    } catch (error) {\n      console.error('Get user responses error:', error);\n      return [];\n    }\n  }\n  async hasUserResponded(formId, userId) {\n    try {\n      const tx = this.db.transaction('form_responses', 'readonly');\n      const store = tx.objectStore('form_responses');\n      const index = store.index('form_user');\n      const response = await index.get([formId, userId]);\n      return !!response;\n    } catch (error) {\n      console.error('Check user response error:', error);\n      return false;\n    }\n  }\n  async getFormResponseCount(formId) {\n    try {\n      const tx = this.db.transaction('form_responses', 'readonly');\n      const store = tx.objectStore('form_responses');\n      const index = store.index('form_id');\n      const responses = await index.getAll(formId);\n      return responses.length;\n    } catch (error) {\n      console.error('Get response count error:', error);\n      return 0;\n    }\n  }\n\n  // Statistics\n  async getStatistics() {\n    try {\n      const [users, forms, responses] = await Promise.all([this.getAllUsers(), this.getAllForms(), this.db.getAll('form_responses')]);\n      const activeForms = forms.filter(form => form.is_active);\n      return {\n        totalUsers: users.length,\n        totalForms: forms.length,\n        totalResponses: responses.length,\n        activeForms: activeForms.length\n      };\n    } catch (error) {\n      console.error('Get statistics error:', error);\n      return {\n        totalUsers: 0,\n        totalForms: 0,\n        totalResponses: 0,\n        activeForms: 0\n      };\n    }\n  }\n\n  // Close database connection\n  close() {\n    if (this.db) {\n      this.db.close();\n    }\n  }\n}\n\n// Create a singleton instance\nconst databaseService = new DatabaseService();\nexport default databaseService;","map":{"version":3,"names":["openDB","v4","uuidv4","bcrypt","DatabaseService","constructor","db","dbName","version","init","upgrade","objectStoreNames","contains","userStore","createObjectStore","keyPath","createIndex","unique","formStore","responseStore","seedInitialData","error","console","adminExists","getUserByEmail","adminPassword","hash","createUser","userPassword","log","email","password","name","role","userId","user","id","created_at","Date","toISOString","updated_at","add","success","Error","authenticateUser","isValidPassword","compare","_","userWithoutPassword","tx","transaction","store","objectStore","index","get","getUserById","getAllUsers","getAll","createForm","formData","createdBy","formId","form","title","description","fields","is_active","created_by","updateForm","existingForm","updatedForm","put","deleteForm","delete","responses","getFormResponses","response","getFormById","getAllForms","getActiveForms","submitResponse","responseData","responseId","form_id","user_id","data","submitted_at","responsesWithUserData","Promise","all","map","user_name","user_email","sort","a","b","getUserResponses","responsesWithFormData","form_title","hasUserResponded","getFormResponseCount","length","getStatistics","users","forms","activeForms","filter","totalUsers","totalForms","totalResponses","close","databaseService"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/services/database.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nclass DatabaseService {\r\n  constructor() {\r\n    this.db = null;\r\n    this.dbName = 'FormBuilderDB';\r\n    this.version = 1;\r\n    this.init();\r\n  }\r\n\r\n  async init() {\r\n    try {\r\n      this.db = await openDB(this.dbName, this.version, {\r\n        upgrade: (db) => {\r\n          // Users store\r\n          if (!db.objectStoreNames.contains('users')) {\r\n            const userStore = db.createObjectStore('users', { keyPath: 'id' });\r\n            userStore.createIndex('email', 'email', { unique: true });\r\n            userStore.createIndex('role', 'role');\r\n          }\r\n\r\n          // Forms store\r\n          if (!db.objectStoreNames.contains('forms')) {\r\n            const formStore = db.createObjectStore('forms', { keyPath: 'id' });\r\n            formStore.createIndex('created_by', 'created_by');\r\n            formStore.createIndex('is_active', 'is_active');\r\n          }\r\n\r\n          // Form responses store\r\n          if (!db.objectStoreNames.contains('form_responses')) {\r\n            const responseStore = db.createObjectStore('form_responses', { keyPath: 'id' });\r\n            responseStore.createIndex('form_id', 'form_id');\r\n            responseStore.createIndex('user_id', 'user_id');\r\n            responseStore.createIndex('form_user', ['form_id', 'user_id'], { unique: true });\r\n          }\r\n        }\r\n      });\r\n\r\n      await this.seedInitialData();\r\n    } catch (error) {\r\n      console.error('Database initialization error:', error);\r\n    }\r\n  }\r\n\r\n  async seedInitialData() {\r\n    try {\r\n      // Check if admin user already exists\r\n      const adminExists = await this.getUserByEmail('admin@example.com');\r\n      \r\n      if (!adminExists) {\r\n        // Create admin user\r\n        const adminPassword = await bcrypt.hash('admin123', 10);\r\n        await this.createUser('admin@example.com', adminPassword, 'Admin User', 'admin');\r\n\r\n        // Create demo user\r\n        const userPassword = await bcrypt.hash('user123', 10);\r\n        await this.createUser('user@example.com', userPassword, 'Regular User', 'user');\r\n        await this.createUser('user2@example.com', userPassword, 'Another User', 'user');\r\n\r\n        console.log('Initial data seeded successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error seeding initial data:', error);\r\n    }\r\n  }\r\n\r\n  // User operations\r\n  async createUser(email, password, name, role = 'user') {\r\n    try {\r\n      const userId = uuidv4();\r\n      const user = {\r\n        id: userId,\r\n        email,\r\n        password,\r\n        name,\r\n        role,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      await this.db.add('users', user);\r\n      return { success: true, userId };\r\n    } catch (error) {\r\n      if (error.name === 'ConstraintError') {\r\n        throw new Error('User already exists');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async authenticateUser(email, password) {\r\n    try {\r\n      const user = await this.getUserByEmail(email);\r\n      \r\n      if (!user) {\r\n        return null;\r\n      }\r\n\r\n      const isValidPassword = await bcrypt.compare(password, user.password);\r\n      \r\n      if (!isValidPassword) {\r\n        return null;\r\n      }\r\n\r\n      const { password: _, ...userWithoutPassword } = user;\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      console.error('Authentication error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getUserByEmail(email) {\r\n    try {\r\n      const tx = this.db.transaction('users', 'readonly');\r\n      const store = tx.objectStore('users');\r\n      const index = store.index('email');\r\n      return await index.get(email);\r\n    } catch (error) {\r\n      console.error('Get user by email error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getUserById(userId) {\r\n    try {\r\n      return await this.db.get('users', userId);\r\n    } catch (error) {\r\n      console.error('Get user error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getAllUsers() {\r\n    try {\r\n      return await this.db.getAll('users');\r\n    } catch (error) {\r\n      console.error('Get all users error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Form operations\r\n  async createForm(formData, createdBy) {\r\n    try {\r\n      const formId = uuidv4();\r\n      const form = {\r\n        id: formId,\r\n        title: formData.title,\r\n        description: formData.description,\r\n        fields: formData.fields,\r\n        is_active: true,\r\n        created_by: createdBy,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      await this.db.add('forms', form);\r\n      return { success: true, formId };\r\n    } catch (error) {\r\n      console.error('Create form error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateForm(formId, formData) {\r\n    try {\r\n      const existingForm = await this.db.get('forms', formId);\r\n      if (!existingForm) {\r\n        throw new Error('Form not found');\r\n      }\r\n\r\n      const updatedForm = {\r\n        ...existingForm,\r\n        title: formData.title,\r\n        description: formData.description,\r\n        fields: formData.fields,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      await this.db.put('forms', updatedForm);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Update form error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteForm(formId) {\r\n    try {\r\n      await this.db.delete('forms', formId);\r\n      // Also delete all responses for this form\r\n      const responses = await this.getFormResponses(formId);\r\n      for (const response of responses) {\r\n        await this.db.delete('form_responses', response.id);\r\n      }\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Delete form error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getFormById(formId) {\r\n    try {\r\n      return await this.db.get('forms', formId);\r\n    } catch (error) {\r\n      console.error('Get form error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getAllForms() {\r\n    try {\r\n      return await this.db.getAll('forms');\r\n    } catch (error) {\r\n      console.error('Get all forms error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getActiveForms() {\r\n    try {\r\n      const tx = this.db.transaction('forms', 'readonly');\r\n      const store = tx.objectStore('forms');\r\n      const index = store.index('is_active');\r\n      return await index.getAll(true);\r\n    } catch (error) {\r\n      console.error('Get active forms error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Response operations\r\n  async submitResponse(formId, userId, responseData) {\r\n    try {\r\n      const responseId = uuidv4();\r\n      const response = {\r\n        id: responseId,\r\n        form_id: formId,\r\n        user_id: userId,\r\n        data: responseData,\r\n        submitted_at: new Date().toISOString()\r\n      };\r\n\r\n      await this.db.add('form_responses', response);\r\n      return { success: true, responseId };\r\n    } catch (error) {\r\n      if (error.name === 'ConstraintError') {\r\n        throw new Error('You have already responded to this form');\r\n      }\r\n      console.error('Submit response error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getFormResponses(formId) {\r\n    try {\r\n      const tx = this.db.transaction('form_responses', 'readonly');\r\n      const store = tx.objectStore('form_responses');\r\n      const index = store.index('form_id');\r\n      const responses = await index.getAll(formId);\r\n\r\n      // Get user details for each response\r\n      const responsesWithUserData = await Promise.all(\r\n        responses.map(async (response) => {\r\n          const user = await this.getUserById(response.user_id);\r\n          return {\r\n            ...response,\r\n            user_name: user?.name || `User ${response.user_id}`,\r\n            user_email: user?.email || ''\r\n          };\r\n        })\r\n      );\r\n\r\n      return responsesWithUserData.sort((a, b) => \r\n        new Date(b.submitted_at) - new Date(a.submitted_at)\r\n      );\r\n    } catch (error) {\r\n      console.error('Get form responses error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getUserResponses(userId) {\r\n    try {\r\n      const tx = this.db.transaction('form_responses', 'readonly');\r\n      const store = tx.objectStore('form_responses');\r\n      const index = store.index('user_id');\r\n      const responses = await index.getAll(userId);\r\n\r\n      // Get form details for each response\r\n      const responsesWithFormData = await Promise.all(\r\n        responses.map(async (response) => {\r\n          const form = await this.getFormById(response.form_id);\r\n          return {\r\n            ...response,\r\n            form_title: form?.title || 'Unknown Form'\r\n          };\r\n        })\r\n      );\r\n\r\n      return responsesWithFormData.sort((a, b) => \r\n        new Date(b.submitted_at) - new Date(a.submitted_at)\r\n      );\r\n    } catch (error) {\r\n      console.error('Get user responses error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async hasUserResponded(formId, userId) {\r\n    try {\r\n      const tx = this.db.transaction('form_responses', 'readonly');\r\n      const store = tx.objectStore('form_responses');\r\n      const index = store.index('form_user');\r\n      const response = await index.get([formId, userId]);\r\n      return !!response;\r\n    } catch (error) {\r\n      console.error('Check user response error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getFormResponseCount(formId) {\r\n    try {\r\n      const tx = this.db.transaction('form_responses', 'readonly');\r\n      const store = tx.objectStore('form_responses');\r\n      const index = store.index('form_id');\r\n      const responses = await index.getAll(formId);\r\n      return responses.length;\r\n    } catch (error) {\r\n      console.error('Get response count error:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Statistics\r\n  async getStatistics() {\r\n    try {\r\n      const [users, forms, responses] = await Promise.all([\r\n        this.getAllUsers(),\r\n        this.getAllForms(),\r\n        this.db.getAll('form_responses')\r\n      ]);\r\n\r\n      const activeForms = forms.filter(form => form.is_active);\r\n\r\n      return {\r\n        totalUsers: users.length,\r\n        totalForms: forms.length,\r\n        totalResponses: responses.length,\r\n        activeForms: activeForms.length\r\n      };\r\n    } catch (error) {\r\n      console.error('Get statistics error:', error);\r\n      return { totalUsers: 0, totalForms: 0, totalResponses: 0, activeForms: 0 };\r\n    }\r\n  }\r\n\r\n  // Close database connection\r\n  close() {\r\n    if (this.db) {\r\n      this.db.close();\r\n    }\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst databaseService = new DatabaseService();\r\n\r\nexport default databaseService;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAC5B,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,eAAe,CAAC;EACpBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,MAAM,GAAG,eAAe;IAC7B,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,IAAI,CAAC,CAAC;EACb;EAEA,MAAMA,IAAIA,CAAA,EAAG;IACX,IAAI;MACF,IAAI,CAACH,EAAE,GAAG,MAAMN,MAAM,CAAC,IAAI,CAACO,MAAM,EAAE,IAAI,CAACC,OAAO,EAAE;QAChDE,OAAO,EAAGJ,EAAE,IAAK;UACf;UACA,IAAI,CAACA,EAAE,CAACK,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC1C,MAAMC,SAAS,GAAGP,EAAE,CAACQ,iBAAiB,CAAC,OAAO,EAAE;cAAEC,OAAO,EAAE;YAAK,CAAC,CAAC;YAClEF,SAAS,CAACG,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE;cAAEC,MAAM,EAAE;YAAK,CAAC,CAAC;YACzDJ,SAAS,CAACG,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC;UACvC;;UAEA;UACA,IAAI,CAACV,EAAE,CAACK,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC1C,MAAMM,SAAS,GAAGZ,EAAE,CAACQ,iBAAiB,CAAC,OAAO,EAAE;cAAEC,OAAO,EAAE;YAAK,CAAC,CAAC;YAClEG,SAAS,CAACF,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC;YACjDE,SAAS,CAACF,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC;UACjD;;UAEA;UACA,IAAI,CAACV,EAAE,CAACK,gBAAgB,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;YACnD,MAAMO,aAAa,GAAGb,EAAE,CAACQ,iBAAiB,CAAC,gBAAgB,EAAE;cAAEC,OAAO,EAAE;YAAK,CAAC,CAAC;YAC/EI,aAAa,CAACH,WAAW,CAAC,SAAS,EAAE,SAAS,CAAC;YAC/CG,aAAa,CAACH,WAAW,CAAC,SAAS,EAAE,SAAS,CAAC;YAC/CG,aAAa,CAACH,WAAW,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;cAAEC,MAAM,EAAE;YAAK,CAAC,CAAC;UAClF;QACF;MACF,CAAC,CAAC;MAEF,MAAM,IAAI,CAACG,eAAe,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF;EAEA,MAAMD,eAAeA,CAAA,EAAG;IACtB,IAAI;MACF;MACA,MAAMG,WAAW,GAAG,MAAM,IAAI,CAACC,cAAc,CAAC,mBAAmB,CAAC;MAElE,IAAI,CAACD,WAAW,EAAE;QAChB;QACA,MAAME,aAAa,GAAG,MAAMtB,MAAM,CAACuB,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;QACvD,MAAM,IAAI,CAACC,UAAU,CAAC,mBAAmB,EAAEF,aAAa,EAAE,YAAY,EAAE,OAAO,CAAC;;QAEhF;QACA,MAAMG,YAAY,GAAG,MAAMzB,MAAM,CAACuB,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;QACrD,MAAM,IAAI,CAACC,UAAU,CAAC,kBAAkB,EAAEC,YAAY,EAAE,cAAc,EAAE,MAAM,CAAC;QAC/E,MAAM,IAAI,CAACD,UAAU,CAAC,mBAAmB,EAAEC,YAAY,EAAE,cAAc,EAAE,MAAM,CAAC;QAEhFN,OAAO,CAACO,GAAG,CAAC,kCAAkC,CAAC;MACjD;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;;EAEA;EACA,MAAMM,UAAUA,CAACG,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,GAAG,MAAM,EAAE;IACrD,IAAI;MACF,MAAMC,MAAM,GAAGhC,MAAM,CAAC,CAAC;MACvB,MAAMiC,IAAI,GAAG;QACXC,EAAE,EAAEF,MAAM;QACVJ,KAAK;QACLC,QAAQ;QACRC,IAAI;QACJC,IAAI;QACJI,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MAED,MAAM,IAAI,CAACjC,EAAE,CAACmC,GAAG,CAAC,OAAO,EAAEN,IAAI,CAAC;MAChC,OAAO;QAAEO,OAAO,EAAE,IAAI;QAAER;MAAO,CAAC;IAClC,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd,IAAIA,KAAK,CAACW,IAAI,KAAK,iBAAiB,EAAE;QACpC,MAAM,IAAIW,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAMtB,KAAK;IACb;EACF;EAEA,MAAMuB,gBAAgBA,CAACd,KAAK,EAAEC,QAAQ,EAAE;IACtC,IAAI;MACF,MAAMI,IAAI,GAAG,MAAM,IAAI,CAACX,cAAc,CAACM,KAAK,CAAC;MAE7C,IAAI,CAACK,IAAI,EAAE;QACT,OAAO,IAAI;MACb;MAEA,MAAMU,eAAe,GAAG,MAAM1C,MAAM,CAAC2C,OAAO,CAACf,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,CAAC;MAErE,IAAI,CAACc,eAAe,EAAE;QACpB,OAAO,IAAI;MACb;MAEA,MAAM;QAAEd,QAAQ,EAAEgB,CAAC;QAAE,GAAGC;MAAoB,CAAC,GAAGb,IAAI;MACpD,OAAOa,mBAAmB;IAC5B,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF;EAEA,MAAMG,cAAcA,CAACM,KAAK,EAAE;IAC1B,IAAI;MACF,MAAMmB,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;MACnD,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,OAAO,CAAC;MACrC,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,OAAO,CAAC;MAClC,OAAO,MAAMA,KAAK,CAACC,GAAG,CAACxB,KAAK,CAAC;IAC/B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,IAAI;IACb;EACF;EAEA,MAAMkC,WAAWA,CAACrB,MAAM,EAAE;IACxB,IAAI;MACF,OAAO,MAAM,IAAI,CAAC5B,EAAE,CAACgD,GAAG,CAAC,OAAO,EAAEpB,MAAM,CAAC;IAC3C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,OAAO,IAAI;IACb;EACF;EAEA,MAAMmC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,OAAO,MAAM,IAAI,CAAClD,EAAE,CAACmD,MAAM,CAAC,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAMqC,UAAUA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IACpC,IAAI;MACF,MAAMC,MAAM,GAAG3D,MAAM,CAAC,CAAC;MACvB,MAAM4D,IAAI,GAAG;QACX1B,EAAE,EAAEyB,MAAM;QACVE,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrBC,WAAW,EAAEL,QAAQ,CAACK,WAAW;QACjCC,MAAM,EAAEN,QAAQ,CAACM,MAAM;QACvBC,SAAS,EAAE,IAAI;QACfC,UAAU,EAAEP,SAAS;QACrBvB,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MAED,MAAM,IAAI,CAACjC,EAAE,CAACmC,GAAG,CAAC,OAAO,EAAEqB,IAAI,CAAC;MAChC,OAAO;QAAEpB,OAAO,EAAE,IAAI;QAAEmB;MAAO,CAAC;IAClC,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,MAAM+C,UAAUA,CAACP,MAAM,EAAEF,QAAQ,EAAE;IACjC,IAAI;MACF,MAAMU,YAAY,GAAG,MAAM,IAAI,CAAC/D,EAAE,CAACgD,GAAG,CAAC,OAAO,EAAEO,MAAM,CAAC;MACvD,IAAI,CAACQ,YAAY,EAAE;QACjB,MAAM,IAAI1B,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA,MAAM2B,WAAW,GAAG;QAClB,GAAGD,YAAY;QACfN,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrBC,WAAW,EAAEL,QAAQ,CAACK,WAAW;QACjCC,MAAM,EAAEN,QAAQ,CAACM,MAAM;QACvBzB,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MAED,MAAM,IAAI,CAACjC,EAAE,CAACiE,GAAG,CAAC,OAAO,EAAED,WAAW,CAAC;MACvC,OAAO;QAAE5B,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMmD,UAAUA,CAACX,MAAM,EAAE;IACvB,IAAI;MACF,MAAM,IAAI,CAACvD,EAAE,CAACmE,MAAM,CAAC,OAAO,EAAEZ,MAAM,CAAC;MACrC;MACA,MAAMa,SAAS,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACd,MAAM,CAAC;MACrD,KAAK,MAAMe,QAAQ,IAAIF,SAAS,EAAE;QAChC,MAAM,IAAI,CAACpE,EAAE,CAACmE,MAAM,CAAC,gBAAgB,EAAEG,QAAQ,CAACxC,EAAE,CAAC;MACrD;MACA,OAAO;QAAEM,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMwD,WAAWA,CAAChB,MAAM,EAAE;IACxB,IAAI;MACF,OAAO,MAAM,IAAI,CAACvD,EAAE,CAACgD,GAAG,CAAC,OAAO,EAAEO,MAAM,CAAC;IAC3C,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,OAAO,IAAI;IACb;EACF;EAEA,MAAMyD,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,OAAO,MAAM,IAAI,CAACxE,EAAE,CAACmD,MAAM,CAAC,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,EAAE;IACX;EACF;EAEA,MAAM0D,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAM9B,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;MACnD,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,OAAO,CAAC;MACrC,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,WAAW,CAAC;MACtC,OAAO,MAAMA,KAAK,CAACI,MAAM,CAAC,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAM2D,cAAcA,CAACnB,MAAM,EAAE3B,MAAM,EAAE+C,YAAY,EAAE;IACjD,IAAI;MACF,MAAMC,UAAU,GAAGhF,MAAM,CAAC,CAAC;MAC3B,MAAM0E,QAAQ,GAAG;QACfxC,EAAE,EAAE8C,UAAU;QACdC,OAAO,EAAEtB,MAAM;QACfuB,OAAO,EAAElD,MAAM;QACfmD,IAAI,EAAEJ,YAAY;QAClBK,YAAY,EAAE,IAAIhD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACvC,CAAC;MAED,MAAM,IAAI,CAACjC,EAAE,CAACmC,GAAG,CAAC,gBAAgB,EAAEmC,QAAQ,CAAC;MAC7C,OAAO;QAAElC,OAAO,EAAE,IAAI;QAAEwC;MAAW,CAAC;IACtC,CAAC,CAAC,OAAO7D,KAAK,EAAE;MACd,IAAIA,KAAK,CAACW,IAAI,KAAK,iBAAiB,EAAE;QACpC,MAAM,IAAIW,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MACArB,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMsD,gBAAgBA,CAACd,MAAM,EAAE;IAC7B,IAAI;MACF,MAAMZ,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,gBAAgB,EAAE,UAAU,CAAC;MAC5D,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,gBAAgB,CAAC;MAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,SAAS,CAAC;MACpC,MAAMqB,SAAS,GAAG,MAAMrB,KAAK,CAACI,MAAM,CAACI,MAAM,CAAC;;MAE5C;MACA,MAAM0B,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7Cf,SAAS,CAACgB,GAAG,CAAC,MAAOd,QAAQ,IAAK;QAChC,MAAMzC,IAAI,GAAG,MAAM,IAAI,CAACoB,WAAW,CAACqB,QAAQ,CAACQ,OAAO,CAAC;QACrD,OAAO;UACL,GAAGR,QAAQ;UACXe,SAAS,EAAE,CAAAxD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,IAAI,KAAI,QAAQ4C,QAAQ,CAACQ,OAAO,EAAE;UACnDQ,UAAU,EAAE,CAAAzD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEL,KAAK,KAAI;QAC7B,CAAC;MACH,CAAC,CACH,CAAC;MAED,OAAOyD,qBAAqB,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACrC,IAAIzD,IAAI,CAACyD,CAAC,CAACT,YAAY,CAAC,GAAG,IAAIhD,IAAI,CAACwD,CAAC,CAACR,YAAY,CACpD,CAAC;IACH,CAAC,CAAC,OAAOjE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF;EAEA,MAAM2E,gBAAgBA,CAAC9D,MAAM,EAAE;IAC7B,IAAI;MACF,MAAMe,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,gBAAgB,EAAE,UAAU,CAAC;MAC5D,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,gBAAgB,CAAC;MAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,SAAS,CAAC;MACpC,MAAMqB,SAAS,GAAG,MAAMrB,KAAK,CAACI,MAAM,CAACvB,MAAM,CAAC;;MAE5C;MACA,MAAM+D,qBAAqB,GAAG,MAAMT,OAAO,CAACC,GAAG,CAC7Cf,SAAS,CAACgB,GAAG,CAAC,MAAOd,QAAQ,IAAK;QAChC,MAAMd,IAAI,GAAG,MAAM,IAAI,CAACe,WAAW,CAACD,QAAQ,CAACO,OAAO,CAAC;QACrD,OAAO;UACL,GAAGP,QAAQ;UACXsB,UAAU,EAAE,CAAApC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,KAAK,KAAI;QAC7B,CAAC;MACH,CAAC,CACH,CAAC;MAED,OAAOkC,qBAAqB,CAACJ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACrC,IAAIzD,IAAI,CAACyD,CAAC,CAACT,YAAY,CAAC,GAAG,IAAIhD,IAAI,CAACwD,CAAC,CAACR,YAAY,CACpD,CAAC;IACH,CAAC,CAAC,OAAOjE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF;EAEA,MAAM8E,gBAAgBA,CAACtC,MAAM,EAAE3B,MAAM,EAAE;IACrC,IAAI;MACF,MAAMe,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,gBAAgB,EAAE,UAAU,CAAC;MAC5D,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,gBAAgB,CAAC;MAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,WAAW,CAAC;MACtC,MAAMuB,QAAQ,GAAG,MAAMvB,KAAK,CAACC,GAAG,CAAC,CAACO,MAAM,EAAE3B,MAAM,CAAC,CAAC;MAClD,OAAO,CAAC,CAAC0C,QAAQ;IACnB,CAAC,CAAC,OAAOvD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF;EAEA,MAAM+E,oBAAoBA,CAACvC,MAAM,EAAE;IACjC,IAAI;MACF,MAAMZ,EAAE,GAAG,IAAI,CAAC3C,EAAE,CAAC4C,WAAW,CAAC,gBAAgB,EAAE,UAAU,CAAC;MAC5D,MAAMC,KAAK,GAAGF,EAAE,CAACG,WAAW,CAAC,gBAAgB,CAAC;MAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC,SAAS,CAAC;MACpC,MAAMqB,SAAS,GAAG,MAAMrB,KAAK,CAACI,MAAM,CAACI,MAAM,CAAC;MAC5C,OAAOa,SAAS,CAAC2B,MAAM;IACzB,CAAC,CAAC,OAAOhF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,CAAC;IACV;EACF;;EAEA;EACA,MAAMiF,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,MAAM,CAACC,KAAK,EAAEC,KAAK,EAAE9B,SAAS,CAAC,GAAG,MAAMc,OAAO,CAACC,GAAG,CAAC,CAClD,IAAI,CAACjC,WAAW,CAAC,CAAC,EAClB,IAAI,CAACsB,WAAW,CAAC,CAAC,EAClB,IAAI,CAACxE,EAAE,CAACmD,MAAM,CAAC,gBAAgB,CAAC,CACjC,CAAC;MAEF,MAAMgD,WAAW,GAAGD,KAAK,CAACE,MAAM,CAAC5C,IAAI,IAAIA,IAAI,CAACI,SAAS,CAAC;MAExD,OAAO;QACLyC,UAAU,EAAEJ,KAAK,CAACF,MAAM;QACxBO,UAAU,EAAEJ,KAAK,CAACH,MAAM;QACxBQ,cAAc,EAAEnC,SAAS,CAAC2B,MAAM;QAChCI,WAAW,EAAEA,WAAW,CAACJ;MAC3B,CAAC;IACH,CAAC,CAAC,OAAOhF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QAAEsF,UAAU,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,cAAc,EAAE,CAAC;QAAEJ,WAAW,EAAE;MAAE,CAAC;IAC5E;EACF;;EAEA;EACAK,KAAKA,CAAA,EAAG;IACN,IAAI,IAAI,CAACxG,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACwG,KAAK,CAAC,CAAC;IACjB;EACF;AACF;;AAEA;AACA,MAAMC,eAAe,GAAG,IAAI3G,eAAe,CAAC,CAAC;AAE7C,eAAe2G,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}