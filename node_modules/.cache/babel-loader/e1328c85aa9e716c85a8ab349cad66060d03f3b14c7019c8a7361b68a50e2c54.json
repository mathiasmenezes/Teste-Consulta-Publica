{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport apiService from './api';\nclass SocialAuthService {\n  constructor() {\n    this.googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id';\n    this.facebookAppId = process.env.REACT_APP_FACEBOOK_APP_ID || 'your-facebook-app-id';\n  }\n\n  // Google OAuth Configuration\n  getGoogleConfig() {\n    return {\n      client_id: this.googleClientId,\n      scope: 'email profile',\n      response_type: 'token',\n      redirect_uri: window.location.origin + '/auth/google/callback'\n    };\n  }\n\n  // Facebook OAuth Configuration\n  getFacebookConfig() {\n    return {\n      app_id: this.facebookAppId,\n      scope: 'email,public_profile',\n      response_type: 'token',\n      redirect_uri: window.location.origin + '/auth/facebook/callback'\n    };\n  }\n\n  // Open OAuth popup window\n  openOAuthPopup(provider, config) {\n    const width = 500;\n    const height = 600;\n    const left = window.screenX + (window.outerWidth - width) / 2;\n    const top = window.screenY + (window.outerHeight - height) / 2;\n    const url = this.buildOAuthUrl(provider, config);\n    const popup = window.open(url, `${provider}OAuth`, `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes`);\n    return new Promise((resolve, reject) => {\n      const checkClosed = setInterval(() => {\n        if (popup.closed) {\n          clearInterval(checkClosed);\n          reject(new Error('OAuth popup was closed'));\n        }\n      }, 1000);\n      window.addEventListener('message', event => {\n        if (event.origin !== window.location.origin) return;\n        if (event.data.type === 'OAUTH_SUCCESS') {\n          clearInterval(checkClosed);\n          popup.close();\n          resolve(event.data.payload);\n        } else if (event.data.type === 'OAUTH_ERROR') {\n          clearInterval(checkClosed);\n          popup.close();\n          reject(new Error(event.data.error));\n        }\n      });\n    });\n  }\n\n  // Build OAuth URL for different providers\n  buildOAuthUrl(provider, config) {\n    switch (provider) {\n      case 'google':\n        const googleParams = new URLSearchParams({\n          client_id: config.client_id,\n          redirect_uri: config.redirect_uri,\n          scope: config.scope,\n          response_type: config.response_type,\n          state: this.generateState()\n        });\n        return `https://accounts.google.com/o/oauth2/v2/auth?${googleParams}`;\n      case 'facebook':\n        const facebookParams = new URLSearchParams({\n          client_id: config.app_id,\n          redirect_uri: config.redirect_uri,\n          scope: config.scope,\n          response_type: config.response_type,\n          state: this.generateState()\n        });\n        return `https://www.facebook.com/v18.0/dialog/oauth?${facebookParams}`;\n      default:\n        throw new Error(`Unsupported provider: ${provider}`);\n    }\n  }\n\n  // Generate random state for OAuth security\n  generateState() {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  // Handle Google OAuth callback\n  async handleGoogleCallback(token) {\n    try {\n      // Decode the ID token to get user information\n      const decoded = jwtDecode(token);\n      const userData = {\n        email: decoded.email,\n        name: decoded.name,\n        picture: decoded.picture,\n        socialId: decoded.sub,\n        provider: 'google'\n      };\n      return await this.processSocialUser(userData);\n    } catch (error) {\n      console.error('Google OAuth callback error:', error);\n      throw new Error('Failed to process Google login');\n    }\n  }\n\n  // Handle Facebook OAuth callback\n  async handleFacebookCallback(token) {\n    try {\n      var _userData$picture, _userData$picture$dat;\n      // Get user information from Facebook Graph API\n      const response = await fetch(`https://graph.facebook.com/me?fields=id,name,email,picture&access_token=${token}`);\n      const userData = await response.json();\n      if (userData.error) {\n        throw new Error(userData.error.message);\n      }\n      const processedUserData = {\n        email: userData.email,\n        name: userData.name,\n        picture: (_userData$picture = userData.picture) === null || _userData$picture === void 0 ? void 0 : (_userData$picture$dat = _userData$picture.data) === null || _userData$picture$dat === void 0 ? void 0 : _userData$picture$dat.url,\n        socialId: userData.id,\n        provider: 'facebook'\n      };\n      return await this.processSocialUser(processedUserData);\n    } catch (error) {\n      console.error('Facebook OAuth callback error:', error);\n      throw new Error('Failed to process Facebook login');\n    }\n  }\n\n  // Process social user data and create/update user\n  async processSocialUser(userData) {\n    try {\n      // Use the API service to handle social login\n      const response = await apiService.socialLogin(userData.email, userData.name, userData.provider, userData.socialId);\n      if (response.success) {\n        return {\n          success: true,\n          user: response.user,\n          isNewUser: !response.user.socialProvider // Check if this is the first social login\n        };\n      } else {\n        throw new Error('Social login failed');\n      }\n    } catch (error) {\n      console.error('Process social user error:', error);\n      throw error;\n    }\n  }\n\n  // Demo OAuth flow (for development/testing)\n  async demoSocialLogin(provider) {\n    try {\n      // Simulate OAuth flow delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const demoUsers = {\n        google: {\n          email: 'demo.google@example.com',\n          name: 'Demo Google User',\n          picture: 'https://via.placeholder.com/150',\n          socialId: 'demo_google_123',\n          provider: 'google'\n        },\n        facebook: {\n          email: 'demo.facebook@example.com',\n          name: 'Demo Facebook User',\n          picture: 'https://via.placeholder.com/150',\n          socialId: 'demo_facebook_456',\n          provider: 'facebook'\n        }\n      };\n      const userData = demoUsers[provider];\n      if (!userData) {\n        throw new Error(`Unsupported provider: ${provider}`);\n      }\n      return await this.processSocialUser(userData);\n    } catch (error) {\n      console.error('Demo social login error:', error);\n      throw error;\n    }\n  }\n}\nexport default new SocialAuthService();","map":{"version":3,"names":["jwtDecode","apiService","SocialAuthService","constructor","googleClientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","facebookAppId","REACT_APP_FACEBOOK_APP_ID","getGoogleConfig","client_id","scope","response_type","redirect_uri","window","location","origin","getFacebookConfig","app_id","openOAuthPopup","provider","config","width","height","left","screenX","outerWidth","top","screenY","outerHeight","url","buildOAuthUrl","popup","open","Promise","resolve","reject","checkClosed","setInterval","closed","clearInterval","Error","addEventListener","event","data","type","close","payload","error","googleParams","URLSearchParams","state","generateState","facebookParams","Math","random","toString","substring","handleGoogleCallback","token","decoded","userData","email","name","picture","socialId","sub","processSocialUser","console","handleFacebookCallback","_userData$picture","_userData$picture$dat","response","fetch","json","message","processedUserData","id","socialLogin","success","user","isNewUser","socialProvider","demoSocialLogin","setTimeout","demoUsers","google","facebook"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/services/socialAuth.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\r\nimport apiService from './api';\r\n\r\nclass SocialAuthService {\r\n  constructor() {\r\n    this.googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id';\r\n    this.facebookAppId = process.env.REACT_APP_FACEBOOK_APP_ID || 'your-facebook-app-id';\r\n  }\r\n\r\n  // Google OAuth Configuration\r\n  getGoogleConfig() {\r\n    return {\r\n      client_id: this.googleClientId,\r\n      scope: 'email profile',\r\n      response_type: 'token',\r\n      redirect_uri: window.location.origin + '/auth/google/callback'\r\n    };\r\n  }\r\n\r\n  // Facebook OAuth Configuration\r\n  getFacebookConfig() {\r\n    return {\r\n      app_id: this.facebookAppId,\r\n      scope: 'email,public_profile',\r\n      response_type: 'token',\r\n      redirect_uri: window.location.origin + '/auth/facebook/callback'\r\n    };\r\n  }\r\n\r\n  // Open OAuth popup window\r\n  openOAuthPopup(provider, config) {\r\n    const width = 500;\r\n    const height = 600;\r\n    const left = window.screenX + (window.outerWidth - width) / 2;\r\n    const top = window.screenY + (window.outerHeight - height) / 2;\r\n\r\n    const url = this.buildOAuthUrl(provider, config);\r\n    \r\n    const popup = window.open(\r\n      url,\r\n      `${provider}OAuth`,\r\n      `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes`\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const checkClosed = setInterval(() => {\r\n        if (popup.closed) {\r\n          clearInterval(checkClosed);\r\n          reject(new Error('OAuth popup was closed'));\r\n        }\r\n      }, 1000);\r\n\r\n      window.addEventListener('message', (event) => {\r\n        if (event.origin !== window.location.origin) return;\r\n        \r\n        if (event.data.type === 'OAUTH_SUCCESS') {\r\n          clearInterval(checkClosed);\r\n          popup.close();\r\n          resolve(event.data.payload);\r\n        } else if (event.data.type === 'OAUTH_ERROR') {\r\n          clearInterval(checkClosed);\r\n          popup.close();\r\n          reject(new Error(event.data.error));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Build OAuth URL for different providers\r\n  buildOAuthUrl(provider, config) {\r\n    switch (provider) {\r\n      case 'google':\r\n        const googleParams = new URLSearchParams({\r\n          client_id: config.client_id,\r\n          redirect_uri: config.redirect_uri,\r\n          scope: config.scope,\r\n          response_type: config.response_type,\r\n          state: this.generateState()\r\n        });\r\n        return `https://accounts.google.com/o/oauth2/v2/auth?${googleParams}`;\r\n      \r\n      case 'facebook':\r\n        const facebookParams = new URLSearchParams({\r\n          client_id: config.app_id,\r\n          redirect_uri: config.redirect_uri,\r\n          scope: config.scope,\r\n          response_type: config.response_type,\r\n          state: this.generateState()\r\n        });\r\n        return `https://www.facebook.com/v18.0/dialog/oauth?${facebookParams}`;\r\n      \r\n      default:\r\n        throw new Error(`Unsupported provider: ${provider}`);\r\n    }\r\n  }\r\n\r\n  // Generate random state for OAuth security\r\n  generateState() {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  }\r\n\r\n  // Handle Google OAuth callback\r\n  async handleGoogleCallback(token) {\r\n    try {\r\n      // Decode the ID token to get user information\r\n      const decoded = jwtDecode(token);\r\n      \r\n      const userData = {\r\n        email: decoded.email,\r\n        name: decoded.name,\r\n        picture: decoded.picture,\r\n        socialId: decoded.sub,\r\n        provider: 'google'\r\n      };\r\n\r\n      return await this.processSocialUser(userData);\r\n    } catch (error) {\r\n      console.error('Google OAuth callback error:', error);\r\n      throw new Error('Failed to process Google login');\r\n    }\r\n  }\r\n\r\n  // Handle Facebook OAuth callback\r\n  async handleFacebookCallback(token) {\r\n    try {\r\n      // Get user information from Facebook Graph API\r\n      const response = await fetch(`https://graph.facebook.com/me?fields=id,name,email,picture&access_token=${token}`);\r\n      const userData = await response.json();\r\n\r\n      if (userData.error) {\r\n        throw new Error(userData.error.message);\r\n      }\r\n\r\n      const processedUserData = {\r\n        email: userData.email,\r\n        name: userData.name,\r\n        picture: userData.picture?.data?.url,\r\n        socialId: userData.id,\r\n        provider: 'facebook'\r\n      };\r\n\r\n      return await this.processSocialUser(processedUserData);\r\n    } catch (error) {\r\n      console.error('Facebook OAuth callback error:', error);\r\n      throw new Error('Failed to process Facebook login');\r\n    }\r\n  }\r\n\r\n  // Process social user data and create/update user\r\n  async processSocialUser(userData) {\r\n    try {\r\n      // Use the API service to handle social login\r\n      const response = await apiService.socialLogin(\r\n        userData.email,\r\n        userData.name,\r\n        userData.provider,\r\n        userData.socialId\r\n      );\r\n\r\n      if (response.success) {\r\n        return {\r\n          success: true,\r\n          user: response.user,\r\n          isNewUser: !response.user.socialProvider // Check if this is the first social login\r\n        };\r\n      } else {\r\n        throw new Error('Social login failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Process social user error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Demo OAuth flow (for development/testing)\r\n  async demoSocialLogin(provider) {\r\n    try {\r\n      // Simulate OAuth flow delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      const demoUsers = {\r\n        google: {\r\n          email: 'demo.google@example.com',\r\n          name: 'Demo Google User',\r\n          picture: 'https://via.placeholder.com/150',\r\n          socialId: 'demo_google_123',\r\n          provider: 'google'\r\n        },\r\n        facebook: {\r\n          email: 'demo.facebook@example.com',\r\n          name: 'Demo Facebook User',\r\n          picture: 'https://via.placeholder.com/150',\r\n          socialId: 'demo_facebook_456',\r\n          provider: 'facebook'\r\n        }\r\n      };\r\n\r\n      const userData = demoUsers[provider];\r\n      if (!userData) {\r\n        throw new Error(`Unsupported provider: ${provider}`);\r\n      }\r\n\r\n      return await this.processSocialUser(userData);\r\n    } catch (error) {\r\n      console.error('Demo social login error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new SocialAuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}