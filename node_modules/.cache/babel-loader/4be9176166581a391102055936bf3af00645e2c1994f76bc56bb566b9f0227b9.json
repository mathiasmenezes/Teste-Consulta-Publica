{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import toast from'react-hot-toast';import apiService from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for stored user session and token\nconst storedUser=localStorage.getItem('currentUser');const token=localStorage.getItem('token');if(storedUser&&token){try{const user=JSON.parse(storedUser);setCurrentUser(user);}catch(error){console.error('Error parsing stored user:',error);localStorage.removeItem('currentUser');localStorage.removeItem('token');}}setLoading(false);},[]);const login=async(email,password)=>{try{const response=await apiService.login(email,password);if(response.success){setCurrentUser(response.user);localStorage.setItem('currentUser',JSON.stringify(response.user));localStorage.setItem('token',response.token);toast.success(\"Welcome back, \".concat(response.user.name,\"!\"));return{success:true,user:response.user};}else{throw new Error('Invalid credentials');}}catch(error){toast.error(error.message||'Login failed');return{success:false,error:error.message};}};const logout=()=>{setCurrentUser(null);localStorage.removeItem('currentUser');localStorage.removeItem('token');toast.success('Logged out successfully');};const registerUser=async(email,password,name)=>{try{const response=await apiService.register(email,password,name);if(response.success){toast.success('User registered successfully');return{success:true};}else{throw new Error('Registration failed');}}catch(error){toast.error(error.message||'Registration failed');return{success:false,error:error.message};}};const requestPasswordReset=async email=>{try{const response=await apiService.requestPasswordReset(email);if(response.success){// In a real application, you would send this token via email\n// For demo purposes, we'll show it in a toast and store it in localStorage\nconst resetData={token:response.token,email:email,expiresAt:response.expiresAt};localStorage.setItem('passwordResetData',JSON.stringify(resetData));toast.success(\"Password reset link sent to \".concat(email,\". Check your email.\"));return{success:true,token:response.token};}}catch(error){toast.error(error.message||'Failed to send password reset email');return{success:false,error:error.message};}};const resetPassword=async(token,newPassword)=>{try{const response=await apiService.resetPassword(token,newPassword);if(response.success){toast.success('Password reset successfully! You can now login with your new password.');localStorage.removeItem('passwordResetData');return{success:true};}}catch(error){toast.error(error.message||'Failed to reset password');return{success:false,error:error.message};}};const validateResetToken=async token=>{try{const response=await apiService.validateResetToken(token);return response.success;}catch(error){return false;}};const loginWithSocial=async user=>{try{const response=await apiService.socialLogin(user.email,user.name,user.socialProvider,user.socialId);if(response.success){setCurrentUser(response.user);localStorage.setItem('currentUser',JSON.stringify(response.user));localStorage.setItem('token',response.token);toast.success(\"Welcome back, \".concat(response.user.name,\"!\"));return{success:true,user:response.user};}else{throw new Error('Social login failed');}}catch(error){toast.error('Social login failed');return{success:false,error:error.message};}};const value={currentUser,login,logout,registerUser,requestPasswordReset,resetPassword,validateResetToken,loginWithSocial,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","apiService","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","storedUser","localStorage","getItem","token","user","JSON","parse","error","console","removeItem","login","email","password","response","success","setItem","stringify","concat","name","message","logout","registerUser","register","requestPasswordReset","resetData","expiresAt","resetPassword","newPassword","validateResetToken","loginWithSocial","socialLogin","socialProvider","socialId","value","Provider"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport apiService from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user session and token\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (storedUser && token) {\r\n      try {\r\n        const user = JSON.parse(storedUser);\r\n        setCurrentUser(user);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        localStorage.removeItem('currentUser');\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await apiService.login(email, password);\r\n      \r\n      if (response.success) {\r\n        setCurrentUser(response.user);\r\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n        localStorage.setItem('token', response.token);\r\n        toast.success(`Welcome back, ${response.user.name}!`);\r\n        return { success: true, user: response.user };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const registerUser = async (email, password, name) => {\r\n    try {\r\n      const response = await apiService.register(email, password, name);\r\n      \r\n      if (response.success) {\r\n        toast.success('User registered successfully');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      const response = await apiService.requestPasswordReset(email);\r\n      \r\n      if (response.success) {\r\n        // In a real application, you would send this token via email\r\n        // For demo purposes, we'll show it in a toast and store it in localStorage\r\n        const resetData = {\r\n          token: response.token,\r\n          email: email,\r\n          expiresAt: response.expiresAt\r\n        };\r\n        \r\n        localStorage.setItem('passwordResetData', JSON.stringify(resetData));\r\n        \r\n        toast.success(`Password reset link sent to ${email}. Check your email.`);\r\n        return { success: true, token: response.token };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to send password reset email');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      const response = await apiService.resetPassword(token, newPassword);\r\n      \r\n      if (response.success) {\r\n        toast.success('Password reset successfully! You can now login with your new password.');\r\n        localStorage.removeItem('passwordResetData');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to reset password');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const validateResetToken = async (token) => {\r\n    try {\r\n      const response = await apiService.validateResetToken(token);\r\n      return response.success;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const loginWithSocial = async (user) => {\r\n    try {\r\n      const response = await apiService.socialLogin(user.email, user.name, user.socialProvider, user.socialId);\r\n      \r\n      if (response.success) {\r\n        setCurrentUser(response.user);\r\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n        localStorage.setItem('token', response.token);\r\n        toast.success(`Welcome back, ${response.user.name}!`);\r\n        return { success: true, user: response.user };\r\n      } else {\r\n        throw new Error('Social login failed');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Social login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    registerUser,\r\n    requestPasswordReset,\r\n    resetPassword,\r\n    validateResetToken,\r\n    loginWithSocial,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}