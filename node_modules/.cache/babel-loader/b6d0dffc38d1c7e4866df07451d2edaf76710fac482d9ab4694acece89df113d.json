{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('./util');\nconst SqliteError = require('./sqlite-error');\nlet DEFAULT_ADDON;\nfunction Database(filenameGiven, options) {\n  if (new.target == null) {\n    return new Database(filenameGiven, options);\n  }\n\n  // Apply defaults\n  let buffer;\n  if (Buffer.isBuffer(filenameGiven)) {\n    buffer = filenameGiven;\n    filenameGiven = ':memory:';\n  }\n  if (filenameGiven == null) filenameGiven = '';\n  if (options == null) options = {};\n\n  // Validate arguments\n  if (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');\n  if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n  if ('readOnly' in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n  if ('memory' in options) throw new TypeError('Option \"memory\" was removed in v7.0.0 (use \":memory:\" filename instead)');\n\n  // Interpret options\n  const filename = filenameGiven.trim();\n  const anonymous = filename === '' || filename === ':memory:';\n  const readonly = util.getBooleanOption(options, 'readonly');\n  const fileMustExist = util.getBooleanOption(options, 'fileMustExist');\n  const timeout = 'timeout' in options ? options.timeout : 5000;\n  const verbose = 'verbose' in options ? options.verbose : null;\n  const nativeBinding = 'nativeBinding' in options ? options.nativeBinding : null;\n\n  // Validate interpreted options\n  if (readonly && anonymous && !buffer) throw new TypeError('In-memory/temporary databases cannot be readonly');\n  if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n  if (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n  if (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the \"verbose\" option to be a function');\n  if (nativeBinding != null && typeof nativeBinding !== 'string' && typeof nativeBinding !== 'object') throw new TypeError('Expected the \"nativeBinding\" option to be a string or addon object');\n\n  // Load the native addon\n  let addon;\n  if (nativeBinding == null) {\n    addon = DEFAULT_ADDON || (DEFAULT_ADDON = require('bindings')('better_sqlite3.node'));\n  } else if (typeof nativeBinding === 'string') {\n    // See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>\n    const requireFunc = typeof __non_webpack_require__ === 'function' ? __non_webpack_require__ : require;\n    addon = requireFunc(path.resolve(nativeBinding).replace(/(\\.node)?$/, '.node'));\n  } else {\n    // See <https://github.com/WiseLibs/better-sqlite3/issues/972>\n    addon = nativeBinding;\n  }\n  if (!addon.isInitialized) {\n    addon.setErrorConstructor(SqliteError);\n    addon.isInitialized = true;\n  }\n\n  // Make sure the specified directory exists\n  if (!anonymous && !fs.existsSync(path.dirname(filename))) {\n    throw new TypeError('Cannot open database because the directory does not exist');\n  }\n  Object.defineProperties(this, {\n    [util.cppdb]: {\n      value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null)\n    },\n    ...wrappers.getters\n  });\n}\nconst wrappers = require('./methods/wrappers');\nDatabase.prototype.prepare = wrappers.prepare;\nDatabase.prototype.transaction = require('./methods/transaction');\nDatabase.prototype.pragma = require('./methods/pragma');\nDatabase.prototype.backup = require('./methods/backup');\nDatabase.prototype.serialize = require('./methods/serialize');\nDatabase.prototype.function = require('./methods/function');\nDatabase.prototype.aggregate = require('./methods/aggregate');\nDatabase.prototype.table = require('./methods/table');\nDatabase.prototype.loadExtension = wrappers.loadExtension;\nDatabase.prototype.exec = wrappers.exec;\nDatabase.prototype.close = wrappers.close;\nDatabase.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;\nDatabase.prototype.unsafeMode = wrappers.unsafeMode;\nDatabase.prototype[util.inspect] = require('./methods/inspect');\nmodule.exports = Database;","map":{"version":3,"names":["fs","require","path","util","SqliteError","DEFAULT_ADDON","Database","filenameGiven","options","new","target","buffer","Buffer","isBuffer","TypeError","filename","trim","anonymous","readonly","getBooleanOption","fileMustExist","timeout","verbose","nativeBinding","Number","isInteger","RangeError","addon","requireFunc","__non_webpack_require__","resolve","replace","isInitialized","setErrorConstructor","existsSync","dirname","Object","defineProperties","cppdb","value","wrappers","getters","prototype","prepare","transaction","pragma","backup","serialize","function","aggregate","table","loadExtension","exec","close","defaultSafeIntegers","unsafeMode","inspect","module","exports"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/node_modules/better-sqlite3/lib/database.js"],"sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('./util');\nconst SqliteError = require('./sqlite-error');\n\nlet DEFAULT_ADDON;\n\nfunction Database(filenameGiven, options) {\n\tif (new.target == null) {\n\t\treturn new Database(filenameGiven, options);\n\t}\n\n\t// Apply defaults\n\tlet buffer;\n\tif (Buffer.isBuffer(filenameGiven)) {\n\t\tbuffer = filenameGiven;\n\t\tfilenameGiven = ':memory:';\n\t}\n\tif (filenameGiven == null) filenameGiven = '';\n\tif (options == null) options = {};\n\n\t// Validate arguments\n\tif (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\tif ('readOnly' in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n\tif ('memory' in options) throw new TypeError('Option \"memory\" was removed in v7.0.0 (use \":memory:\" filename instead)');\n\n\t// Interpret options\n\tconst filename = filenameGiven.trim();\n\tconst anonymous = filename === '' || filename === ':memory:';\n\tconst readonly = util.getBooleanOption(options, 'readonly');\n\tconst fileMustExist = util.getBooleanOption(options, 'fileMustExist');\n\tconst timeout = 'timeout' in options ? options.timeout : 5000;\n\tconst verbose = 'verbose' in options ? options.verbose : null;\n\tconst nativeBinding = 'nativeBinding' in options ? options.nativeBinding : null;\n\n\t// Validate interpreted options\n\tif (readonly && anonymous && !buffer) throw new TypeError('In-memory/temporary databases cannot be readonly');\n\tif (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n\tif (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n\tif (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the \"verbose\" option to be a function');\n\tif (nativeBinding != null && typeof nativeBinding !== 'string' && typeof nativeBinding !== 'object') throw new TypeError('Expected the \"nativeBinding\" option to be a string or addon object');\n\n\t// Load the native addon\n\tlet addon;\n\tif (nativeBinding == null) {\n\t\taddon = DEFAULT_ADDON || (DEFAULT_ADDON = require('bindings')('better_sqlite3.node'));\n\t} else if (typeof nativeBinding === 'string') {\n\t\t// See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>\n\t\tconst requireFunc = typeof __non_webpack_require__ === 'function' ? __non_webpack_require__ : require;\n\t\taddon = requireFunc(path.resolve(nativeBinding).replace(/(\\.node)?$/, '.node'));\n\t} else {\n\t\t// See <https://github.com/WiseLibs/better-sqlite3/issues/972>\n\t\taddon = nativeBinding;\n\t}\n\n\tif (!addon.isInitialized) {\n\t\taddon.setErrorConstructor(SqliteError);\n\t\taddon.isInitialized = true;\n\t}\n\n\t// Make sure the specified directory exists\n\tif (!anonymous && !fs.existsSync(path.dirname(filename))) {\n\t\tthrow new TypeError('Cannot open database because the directory does not exist');\n\t}\n\n\tObject.defineProperties(this, {\n\t\t[util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\n\t\t...wrappers.getters,\n\t});\n}\n\nconst wrappers = require('./methods/wrappers');\nDatabase.prototype.prepare = wrappers.prepare;\nDatabase.prototype.transaction = require('./methods/transaction');\nDatabase.prototype.pragma = require('./methods/pragma');\nDatabase.prototype.backup = require('./methods/backup');\nDatabase.prototype.serialize = require('./methods/serialize');\nDatabase.prototype.function = require('./methods/function');\nDatabase.prototype.aggregate = require('./methods/aggregate');\nDatabase.prototype.table = require('./methods/table');\nDatabase.prototype.loadExtension = wrappers.loadExtension;\nDatabase.prototype.exec = wrappers.exec;\nDatabase.prototype.close = wrappers.close;\nDatabase.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;\nDatabase.prototype.unsafeMode = wrappers.unsafeMode;\nDatabase.prototype[util.inspect] = require('./methods/inspect');\n\nmodule.exports = Database;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}