{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Highcastle\\\\Documents\\\\Cidad\\xE3o+ Consulta P\\xFAblica\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport databaseService from '../services/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user session\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        setCurrentUser(user);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('currentUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const user = await databaseService.authenticateUser(email, password);\n      if (user) {\n        setCurrentUser(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        toast.success(`Welcome back, ${user.name}!`);\n        return {\n          success: true,\n          user\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    toast.success('Logged out successfully');\n  };\n  const registerUser = async (email, password, name) => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await databaseService.createUser(email, password, name, 'user');\n      toast.success('User registered successfully');\n      return {\n        success: true\n      };\n    } catch (error) {\n      toast.error(error.message || 'Registration failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const result = await databaseService.createPasswordResetToken(email);\n      if (result.success) {\n        // In a real application, you would send this token via email\n        // For demo purposes, we'll show it in a toast and store it in localStorage\n        const resetData = {\n          token: result.token,\n          email: result.user.email,\n          expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n        };\n        localStorage.setItem('passwordResetData', JSON.stringify(resetData));\n        toast.success(`Password reset link sent to ${email}. Check your email.`);\n        return {\n          success: true,\n          token: result.token\n        };\n      }\n    } catch (error) {\n      toast.error(error.message || 'Failed to send password reset email');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const result = await databaseService.resetPassword(token, newPassword);\n      if (result.success) {\n        toast.success('Password reset successfully! You can now login with your new password.');\n        localStorage.removeItem('passwordResetData');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error(error.message || 'Failed to reset password');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const validateResetToken = async token => {\n    try {\n      const resetToken = await databaseService.validatePasswordResetToken(token);\n      return resetToken !== null;\n    } catch (error) {\n      return false;\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    registerUser,\n    requestPasswordReset,\n    resetPassword,\n    validateResetToken,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","databaseService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","storedUser","localStorage","getItem","user","JSON","parse","error","console","removeItem","login","email","password","Promise","resolve","setTimeout","authenticateUser","setItem","stringify","success","name","message","logout","registerUser","createUser","requestPasswordReset","result","createPasswordResetToken","resetData","token","expiresAt","Date","now","toISOString","resetPassword","newPassword","validateResetToken","resetToken","validatePasswordResetToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport databaseService from '../services/database';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user session\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      try {\r\n        const user = JSON.parse(storedUser);\r\n        setCurrentUser(user);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        localStorage.removeItem('currentUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const user = await databaseService.authenticateUser(email, password);\r\n      \r\n      if (user) {\r\n        setCurrentUser(user);\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n        toast.success(`Welcome back, ${user.name}!`);\r\n        return { success: true, user };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const registerUser = async (email, password, name) => {\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      await databaseService.createUser(email, password, name, 'user');\r\n      toast.success('User registered successfully');\r\n      return { success: true };\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const result = await databaseService.createPasswordResetToken(email);\r\n      \r\n      if (result.success) {\r\n        // In a real application, you would send this token via email\r\n        // For demo purposes, we'll show it in a toast and store it in localStorage\r\n        const resetData = {\r\n          token: result.token,\r\n          email: result.user.email,\r\n          expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\r\n        };\r\n        \r\n        localStorage.setItem('passwordResetData', JSON.stringify(resetData));\r\n        \r\n        toast.success(`Password reset link sent to ${email}. Check your email.`);\r\n        return { success: true, token: result.token };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to send password reset email');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const result = await databaseService.resetPassword(token, newPassword);\r\n      \r\n      if (result.success) {\r\n        toast.success('Password reset successfully! You can now login with your new password.');\r\n        localStorage.removeItem('passwordResetData');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to reset password');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const validateResetToken = async (token) => {\r\n    try {\r\n      const resetToken = await databaseService.validatePasswordResetToken(token);\r\n      return resetToken !== null;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    registerUser,\r\n    requestPasswordReset,\r\n    resetPassword,\r\n    validateResetToken,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}