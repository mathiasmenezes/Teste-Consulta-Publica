{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Highcastle\\\\Documents\\\\Cidad\\xE3o+ Consulta P\\xFAblica\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Mock users for demonstration\n  const mockUsers = [{\n    id: '1',\n    email: 'admin@example.com',\n    password: 'admin123',\n    role: 'admin',\n    name: 'Admin User'\n  }, {\n    id: '2',\n    email: 'user@example.com',\n    password: 'user123',\n    role: 'user',\n    name: 'Regular User'\n  }, {\n    id: '3',\n    email: 'user2@example.com',\n    password: 'user123',\n    role: 'user',\n    name: 'Another User'\n  }];\n  useEffect(() => {\n    // Check for stored user session\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const user = mockUsers.find(u => u.email === email && u.password === password);\n      if (user) {\n        const {\n          password: _,\n          ...userWithoutPassword\n        } = user;\n        setCurrentUser(userWithoutPassword);\n        localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n        toast.success(`Welcome back, ${userWithoutPassword.name}!`);\n        return {\n          success: true,\n          user: userWithoutPassword\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    toast.success('Logged out successfully');\n  };\n  const registerUser = async (email, password, name) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const existingUser = mockUsers.find(u => u.email === email);\n      if (existingUser) {\n        throw new Error('User already exists');\n      }\n      const newUser = {\n        id: Date.now().toString(),\n        email,\n        password,\n        role: 'user',\n        name\n      };\n      mockUsers.push(newUser);\n      toast.success('User registered successfully');\n      return {\n        success: true\n      };\n    } catch (error) {\n      toast.error(error.message || 'Registration failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    registerUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","mockUsers","id","email","password","role","name","storedUser","localStorage","getItem","JSON","parse","login","Promise","resolve","setTimeout","user","find","u","_","userWithoutPassword","setItem","stringify","success","error","message","logout","removeItem","registerUser","existingUser","newUser","Date","now","toString","push","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Mock users for demonstration\r\n  const mockUsers = [\r\n    { id: '1', email: 'admin@example.com', password: 'admin123', role: 'admin', name: 'Admin User' },\r\n    { id: '2', email: 'user@example.com', password: 'user123', role: 'user', name: 'Regular User' },\r\n    { id: '3', email: 'user2@example.com', password: 'user123', role: 'user', name: 'Another User' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Check for stored user session\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      setCurrentUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const user = mockUsers.find(u => u.email === email && u.password === password);\r\n      \r\n      if (user) {\r\n        const { password: _, ...userWithoutPassword } = user;\r\n        setCurrentUser(userWithoutPassword);\r\n        localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n        toast.success(`Welcome back, ${userWithoutPassword.name}!`);\r\n        return { success: true, user: userWithoutPassword };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const registerUser = async (email, password, name) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const existingUser = mockUsers.find(u => u.email === email);\r\n      if (existingUser) {\r\n        throw new Error('User already exists');\r\n      }\r\n\r\n      const newUser = {\r\n        id: Date.now().toString(),\r\n        email,\r\n        password,\r\n        role: 'user',\r\n        name\r\n      };\r\n\r\n      mockUsers.push(newUser);\r\n      toast.success('User registered successfully');\r\n      return { success: true };\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    registerUser,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}