{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Highcastle\\\\Documents\\\\Cidad\\xE3o+ Consulta P\\xFAblica\\\\src\\\\contexts\\\\FormContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContext = /*#__PURE__*/createContext();\nexport const useForm = () => {\n  _s();\n  const context = useContext(FormContext);\n  if (!context) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n};\n_s(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FormProvider = ({\n  children\n}) => {\n  _s2();\n  const [forms, setForms] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Load data from database on mount\n  useEffect(() => {\n    loadData();\n  }, []);\n  const loadData = async () => {\n    try {\n      const formsData = await databaseService.getAllForms();\n      setForms(formsData);\n      // Responses will be loaded per form when needed\n      setResponses([]);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n  const createForm = async formData => {\n    setLoading(true);\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const result = await databaseService.createForm(formData, formData.createdBy);\n      if (result.success) {\n        // Reload forms to get the updated list\n        const updatedForms = await databaseService.getAllForms();\n        setForms(updatedForms);\n        toast.success('Form created successfully!');\n        return {\n          success: true,\n          formId: result.formId\n        };\n      }\n    } catch (error) {\n      toast.error('Failed to create form');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateForm = async (formId, formData) => {\n    setLoading(true);\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await databaseService.updateForm(formId, formData);\n\n      // Reload forms to get the updated list\n      const updatedForms = await databaseService.getAllForms();\n      setForms(updatedForms);\n      toast.success('Form updated successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      toast.error('Failed to update form');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteForm = async formId => {\n    setLoading(true);\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await databaseService.deleteForm(formId);\n\n      // Reload forms to get the updated list\n      const updatedForms = await databaseService.getAllForms();\n      setForms(updatedForms);\n      toast.success('Form deleted successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      toast.error('Failed to delete form');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const submitResponse = async (formId, responseData, userId) => {\n    setLoading(true);\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await databaseService.submitResponse(formId, userId, responseData);\n      toast.success('Response submitted successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      toast.error(error.message || 'Failed to submit response');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getFormById = async formId => {\n    try {\n      return await databaseService.getFormById(formId);\n    } catch (error) {\n      console.error('Error getting form by ID:', error);\n      return null;\n    }\n  };\n  const getFormResponses = async formId => {\n    try {\n      return await databaseService.getFormResponses(formId);\n    } catch (error) {\n      console.error('Error getting form responses:', error);\n      return [];\n    }\n  };\n  const getUserResponses = async userId => {\n    try {\n      return await databaseService.getUserResponses(userId);\n    } catch (error) {\n      console.error('Error getting user responses:', error);\n      return [];\n    }\n  };\n  const getActiveForms = async () => {\n    try {\n      return await databaseService.getActiveForms();\n    } catch (error) {\n      console.error('Error getting active forms:', error);\n      return [];\n    }\n  };\n  const getFormResponseCount = async formId => {\n    try {\n      return await databaseService.getFormResponseCount(formId);\n    } catch (error) {\n      console.error('Error getting form response count:', error);\n      return 0;\n    }\n  };\n  const hasUserResponded = async (formId, userId) => {\n    try {\n      return await databaseService.hasUserResponded(formId, userId);\n    } catch (error) {\n      console.error('Error checking user response:', error);\n      return false;\n    }\n  };\n  const getStatistics = async () => {\n    try {\n      return await databaseService.getStatistics();\n    } catch (error) {\n      console.error('Error getting statistics:', error);\n      return {\n        totalUsers: 0,\n        totalForms: 0,\n        totalResponses: 0,\n        activeForms: 0\n      };\n    }\n  };\n  const value = {\n    forms,\n    responses,\n    loading,\n    createForm,\n    updateForm,\n    deleteForm,\n    submitResponse,\n    getFormById,\n    getFormResponses,\n    getUserResponses,\n    getActiveForms,\n    getFormResponseCount,\n    hasUserResponded,\n    getStatistics,\n    loadData\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s2(FormProvider, \"PgP50qGbIOvCojqL7FIeJUbaEoY=\");\n_c = FormProvider;\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","apiService","jsxDEV","_jsxDEV","FormContext","useForm","_s","context","Error","FormProvider","children","_s2","forms","setForms","responses","setResponses","loading","setLoading","loadData","formsData","databaseService","getAllForms","error","console","createForm","formData","Promise","resolve","setTimeout","result","createdBy","success","updatedForms","formId","message","updateForm","deleteForm","submitResponse","responseData","userId","getFormById","getFormResponses","getUserResponses","getActiveForms","getFormResponseCount","hasUserResponded","getStatistics","totalUsers","totalForms","totalResponses","activeForms","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/FormContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport apiService from '../services/api';\r\n\r\nconst FormContext = createContext();\r\n\r\nexport const useForm = () => {\r\n  const context = useContext(FormContext);\r\n  if (!context) {\r\n    throw new Error('useForm must be used within a FormProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const FormProvider = ({ children }) => {\r\n  const [forms, setForms] = useState([]);\r\n  const [responses, setResponses] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Load data from database on mount\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      const formsData = await databaseService.getAllForms();\r\n      setForms(formsData);\r\n      // Responses will be loaded per form when needed\r\n      setResponses([]);\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    }\r\n  };\r\n\r\n  const createForm = async (formData) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const result = await databaseService.createForm(formData, formData.createdBy);\r\n      \r\n      if (result.success) {\r\n        // Reload forms to get the updated list\r\n        const updatedForms = await databaseService.getAllForms();\r\n        setForms(updatedForms);\r\n        toast.success('Form created successfully!');\r\n        return { success: true, formId: result.formId };\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to create form');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateForm = async (formId, formData) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      await databaseService.updateForm(formId, formData);\r\n      \r\n      // Reload forms to get the updated list\r\n      const updatedForms = await databaseService.getAllForms();\r\n      setForms(updatedForms);\r\n      \r\n      toast.success('Form updated successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      toast.error('Failed to update form');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteForm = async (formId) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      await databaseService.deleteForm(formId);\r\n      \r\n      // Reload forms to get the updated list\r\n      const updatedForms = await databaseService.getAllForms();\r\n      setForms(updatedForms);\r\n      \r\n      toast.success('Form deleted successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      toast.error('Failed to delete form');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const submitResponse = async (formId, responseData, userId) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      await databaseService.submitResponse(formId, userId, responseData);\r\n      \r\n      toast.success('Response submitted successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to submit response');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getFormById = async (formId) => {\r\n    try {\r\n      return await databaseService.getFormById(formId);\r\n    } catch (error) {\r\n      console.error('Error getting form by ID:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getFormResponses = async (formId) => {\r\n    try {\r\n      return await databaseService.getFormResponses(formId);\r\n    } catch (error) {\r\n      console.error('Error getting form responses:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getUserResponses = async (userId) => {\r\n    try {\r\n      return await databaseService.getUserResponses(userId);\r\n    } catch (error) {\r\n      console.error('Error getting user responses:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getActiveForms = async () => {\r\n    try {\r\n      return await databaseService.getActiveForms();\r\n    } catch (error) {\r\n      console.error('Error getting active forms:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getFormResponseCount = async (formId) => {\r\n    try {\r\n      return await databaseService.getFormResponseCount(formId);\r\n    } catch (error) {\r\n      console.error('Error getting form response count:', error);\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const hasUserResponded = async (formId, userId) => {\r\n    try {\r\n      return await databaseService.hasUserResponded(formId, userId);\r\n    } catch (error) {\r\n      console.error('Error checking user response:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const getStatistics = async () => {\r\n    try {\r\n      return await databaseService.getStatistics();\r\n    } catch (error) {\r\n      console.error('Error getting statistics:', error);\r\n      return { totalUsers: 0, totalForms: 0, totalResponses: 0, activeForms: 0 };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    forms,\r\n    responses,\r\n    loading,\r\n    createForm,\r\n    updateForm,\r\n    deleteForm,\r\n    submitResponse,\r\n    getFormById,\r\n    getFormResponses,\r\n    getUserResponses,\r\n    getActiveForms,\r\n    getFormResponseCount,\r\n    hasUserResponded,\r\n    getStatistics,\r\n    loadData\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={value}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}