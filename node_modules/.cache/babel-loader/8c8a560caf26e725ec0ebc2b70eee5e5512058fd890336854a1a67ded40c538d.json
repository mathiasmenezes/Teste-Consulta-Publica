{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Highcastle\\\\Documents\\\\Cidad\\xE3o+ Consulta P\\xFAblica\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user session and token\n    const storedUser = localStorage.getItem('currentUser');\n    const token = localStorage.getItem('token');\n    if (storedUser && token) {\n      try {\n        const user = JSON.parse(storedUser);\n        setCurrentUser(user);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('currentUser');\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await apiService.login(email, password);\n      if (response.success) {\n        setCurrentUser(response.user);\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\n        localStorage.setItem('token', response.token);\n        toast.success(`Welcome back, ${response.user.name}!`);\n        return {\n          success: true,\n          user: response.user\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token');\n    toast.success('Logged out successfully');\n  };\n  const registerUser = async (email, password, name) => {\n    try {\n      const response = await apiService.register(email, password, name);\n      if (response.success) {\n        toast.success('User registered successfully');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Registration failed');\n      }\n    } catch (error) {\n      toast.error(error.message || 'Registration failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      const response = await apiService.requestPasswordReset(email);\n      if (response.success) {\n        // In a real application, you would send this token via email\n        // For demo purposes, we'll show it in a toast and store it in localStorage\n        const resetData = {\n          token: response.token,\n          email: email,\n          expiresAt: response.expiresAt\n        };\n        localStorage.setItem('passwordResetData', JSON.stringify(resetData));\n        toast.success(`Password reset link sent to ${email}. Check your email.`);\n        return {\n          success: true,\n          token: response.token\n        };\n      }\n    } catch (error) {\n      toast.error(error.message || 'Failed to send password reset email');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      const response = await apiService.resetPassword(token, newPassword);\n      if (response.success) {\n        toast.success('Password reset successfully! You can now login with your new password.');\n        localStorage.removeItem('passwordResetData');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error(error.message || 'Failed to reset password');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const validateResetToken = async token => {\n    try {\n      const response = await apiService.validateResetToken(token);\n      return response.success;\n    } catch (error) {\n      return false;\n    }\n  };\n  const loginWithSocial = async user => {\n    try {\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      toast.success(`Welcome back, ${user.name}!`);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      toast.error('Social login failed');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    registerUser,\n    requestPasswordReset,\n    resetPassword,\n    validateResetToken,\n    loginWithSocial,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","storedUser","localStorage","getItem","token","user","JSON","parse","error","console","removeItem","login","email","password","response","success","setItem","stringify","name","message","logout","registerUser","register","requestPasswordReset","resetData","expiresAt","resetPassword","newPassword","validateResetToken","loginWithSocial","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport apiService from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user session and token\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (storedUser && token) {\r\n      try {\r\n        const user = JSON.parse(storedUser);\r\n        setCurrentUser(user);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        localStorage.removeItem('currentUser');\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await apiService.login(email, password);\r\n      \r\n      if (response.success) {\r\n        setCurrentUser(response.user);\r\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n        localStorage.setItem('token', response.token);\r\n        toast.success(`Welcome back, ${response.user.name}!`);\r\n        return { success: true, user: response.user };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const registerUser = async (email, password, name) => {\r\n    try {\r\n      const response = await apiService.register(email, password, name);\r\n      \r\n      if (response.success) {\r\n        toast.success('User registered successfully');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      const response = await apiService.requestPasswordReset(email);\r\n      \r\n      if (response.success) {\r\n        // In a real application, you would send this token via email\r\n        // For demo purposes, we'll show it in a toast and store it in localStorage\r\n        const resetData = {\r\n          token: response.token,\r\n          email: email,\r\n          expiresAt: response.expiresAt\r\n        };\r\n        \r\n        localStorage.setItem('passwordResetData', JSON.stringify(resetData));\r\n        \r\n        toast.success(`Password reset link sent to ${email}. Check your email.`);\r\n        return { success: true, token: response.token };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to send password reset email');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      const response = await apiService.resetPassword(token, newPassword);\r\n      \r\n      if (response.success) {\r\n        toast.success('Password reset successfully! You can now login with your new password.');\r\n        localStorage.removeItem('passwordResetData');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to reset password');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const validateResetToken = async (token) => {\r\n    try {\r\n      const response = await apiService.validateResetToken(token);\r\n      return response.success;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const loginWithSocial = async (user) => {\r\n    try {\r\n      setCurrentUser(user);\r\n      localStorage.setItem('currentUser', JSON.stringify(user));\r\n      toast.success(`Welcome back, ${user.name}!`);\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      toast.error('Social login failed');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    registerUser,\r\n    requestPasswordReset,\r\n    resetPassword,\r\n    validateResetToken,\r\n    loginWithSocial,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}