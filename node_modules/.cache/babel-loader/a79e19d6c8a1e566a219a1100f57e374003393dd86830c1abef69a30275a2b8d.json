{"ast":null,"code":"'use strict';\n\nconst {\n  cppdb\n} = require('../util');\nmodule.exports = function defineTable(name, factory) {\n  // Validate arguments\n  if (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n  if (!name) throw new TypeError('Virtual table module name cannot be an empty string');\n\n  // Determine whether the module is eponymous-only or not\n  let eponymous = false;\n  if (typeof factory === 'object' && factory !== null) {\n    eponymous = true;\n    factory = defer(parseTableDefinition(factory, 'used', name));\n  } else {\n    if (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\n    factory = wrapFactory(factory);\n  }\n  this[cppdb].table(factory, name, eponymous);\n  return this;\n};\nfunction wrapFactory(factory) {\n  return function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n    const thisObject = {\n      module: moduleName,\n      database: databaseName,\n      table: tableName\n    };\n\n    // Generate a new table definition by invoking the factory\n    const def = apply.call(factory, thisObject, args);\n    if (typeof def !== 'object' || def === null) {\n      throw new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n    }\n    return parseTableDefinition(def, 'returned', moduleName);\n  };\n}\nfunction parseTableDefinition(def, verb, moduleName) {\n  // Validate required properties\n  if (!hasOwnProperty.call(def, 'rows')) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n  }\n  if (!hasOwnProperty.call(def, 'columns')) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n  }\n\n  // Validate \"rows\" property\n  const rows = def.rows;\n  if (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n  }\n\n  // Validate \"columns\" property\n  let columns = def.columns;\n  if (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n  }\n  if (columns.length !== new Set(columns).size) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n  }\n  if (!columns.length) {\n    throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n  }\n\n  // Validate \"parameters\" property\n  let parameters;\n  if (hasOwnProperty.call(def, 'parameters')) {\n    parameters = def.parameters;\n    if (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\n      throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n    }\n  } else {\n    parameters = inferParameters(rows);\n  }\n  if (parameters.length !== new Set(parameters).size) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n  }\n  if (parameters.length > 32) {\n    throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n  }\n  for (const parameter of parameters) {\n    if (columns.includes(parameter)) {\n      throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n    }\n  }\n\n  // Validate \"safeIntegers\" option\n  let safeIntegers = 2;\n  if (hasOwnProperty.call(def, 'safeIntegers')) {\n    const bool = def.safeIntegers;\n    if (typeof bool !== 'boolean') {\n      throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n    }\n    safeIntegers = +bool;\n  }\n\n  // Validate \"directOnly\" option\n  let directOnly = false;\n  if (hasOwnProperty.call(def, 'directOnly')) {\n    directOnly = def.directOnly;\n    if (typeof directOnly !== 'boolean') {\n      throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n    }\n  }\n\n  // Generate SQL for the virtual table definition\n  const columnDefinitions = [...parameters.map(identifier).map(str => `${str} HIDDEN`), ...columns.map(identifier)];\n  return [`CREATE TABLE x(${columnDefinitions.join(', ')});`, wrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName), parameters, safeIntegers, directOnly];\n}\nfunction wrapGenerator(generator, columnMap, moduleName) {\n  return function* virtualTable(...args) {\n    /*\n    \tWe must defensively clone any buffers in the arguments, because\n    \totherwise the generator could mutate one of them, which would cause\n    \tus to return incorrect values for hidden columns, potentially\n    \tcorrupting the database.\n     */\n    const output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\n    for (let i = 0; i < columnMap.size; ++i) {\n      output.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n    }\n    for (const row of generator(...args)) {\n      if (Array.isArray(row)) {\n        extractRowArray(row, output, columnMap.size, moduleName);\n        yield output;\n      } else if (typeof row === 'object' && row !== null) {\n        extractRowObject(row, output, columnMap, moduleName);\n        yield output;\n      } else {\n        throw new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n      }\n    }\n  };\n}\nfunction extractRowArray(row, output, columnCount, moduleName) {\n  if (row.length !== columnCount) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n  }\n  const offset = output.length - columnCount;\n  for (let i = 0; i < columnCount; ++i) {\n    output[i + offset] = row[i];\n  }\n}\nfunction extractRowObject(row, output, columnMap, moduleName) {\n  let count = 0;\n  for (const key of Object.keys(row)) {\n    const index = columnMap.get(key);\n    if (index === undefined) {\n      throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n    }\n    output[index] = row[key];\n    count += 1;\n  }\n  if (count !== columnMap.size) {\n    throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n  }\n}\nfunction inferParameters({\n  length\n}) {\n  if (!Number.isInteger(length) || length < 0) {\n    throw new TypeError('Expected function.length to be a positive integer');\n  }\n  const params = [];\n  for (let i = 0; i < length; ++i) {\n    params.push(`$${i + 1}`);\n  }\n  return params;\n}\nconst {\n  hasOwnProperty\n} = Object.prototype;\nconst {\n  apply\n} = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function* () {});\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = x => () => x;","map":{"version":3,"names":["cppdb","require","module","exports","defineTable","name","factory","TypeError","eponymous","defer","parseTableDefinition","wrapFactory","table","virtualTableFactory","moduleName","databaseName","tableName","args","thisObject","database","def","apply","call","verb","hasOwnProperty","rows","Object","getPrototypeOf","GeneratorFunctionPrototype","columns","Array","isArray","every","x","length","Set","size","RangeError","parameters","inferParameters","parameter","includes","safeIntegers","bool","directOnly","columnDefinitions","map","identifier","str","join","wrapGenerator","Map","i","generator","columnMap","virtualTable","output","Buffer","isBuffer","from","push","row","extractRowArray","extractRowObject","columnCount","offset","count","key","keys","index","get","undefined","Number","isInteger","params","prototype","Function","replace"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/node_modules/better-sqlite3/lib/methods/table.js"],"sourcesContent":["'use strict';\nconst { cppdb } = require('../util');\n\nmodule.exports = function defineTable(name, factory) {\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (!name) throw new TypeError('Virtual table module name cannot be an empty string');\n\n\t// Determine whether the module is eponymous-only or not\n\tlet eponymous = false;\n\tif (typeof factory === 'object' && factory !== null) {\n\t\teponymous = true;\n\t\tfactory = defer(parseTableDefinition(factory, 'used', name));\n\t} else {\n\t\tif (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\n\t\tfactory = wrapFactory(factory);\n\t}\n\n\tthis[cppdb].table(factory, name, eponymous);\n\treturn this;\n};\n\nfunction wrapFactory(factory) {\n\treturn function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n\t\tconst thisObject = {\n\t\t\tmodule: moduleName,\n\t\t\tdatabase: databaseName,\n\t\t\ttable: tableName,\n\t\t};\n\n\t\t// Generate a new table definition by invoking the factory\n\t\tconst def = apply.call(factory, thisObject, args);\n\t\tif (typeof def !== 'object' || def === null) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n\t\t}\n\n\t\treturn parseTableDefinition(def, 'returned', moduleName);\n\t};\n}\n\nfunction parseTableDefinition(def, verb, moduleName) {\n\t// Validate required properties\n\tif (!hasOwnProperty.call(def, 'rows')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n\t}\n\tif (!hasOwnProperty.call(def, 'columns')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n\t}\n\n\t// Validate \"rows\" property\n\tconst rows = def.rows;\n\tif (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n\t}\n\n\t// Validate \"columns\" property\n\tlet columns = def.columns;\n\tif (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n\t}\n\tif (columns.length !== new Set(columns).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n\t}\n\tif (!columns.length) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n\t}\n\n\t// Validate \"parameters\" property\n\tlet parameters;\n\tif (hasOwnProperty.call(def, 'parameters')) {\n\t\tparameters = def.parameters;\n\t\tif (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n\t\t}\n\t} else {\n\t\tparameters = inferParameters(rows);\n\t}\n\tif (parameters.length !== new Set(parameters).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n\t}\n\tif (parameters.length > 32) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n\t}\n\tfor (const parameter of parameters) {\n\t\tif (columns.includes(parameter)) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n\t\t}\n\t}\n\n\t// Validate \"safeIntegers\" option\n\tlet safeIntegers = 2;\n\tif (hasOwnProperty.call(def, 'safeIntegers')) {\n\t\tconst bool = def.safeIntegers;\n\t\tif (typeof bool !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n\t\t}\n\t\tsafeIntegers = +bool;\n\t}\n\n\t// Validate \"directOnly\" option\n\tlet directOnly = false;\n\tif (hasOwnProperty.call(def, 'directOnly')) {\n\t\tdirectOnly = def.directOnly;\n\t\tif (typeof directOnly !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n\t\t}\n\t}\n\n\t// Generate SQL for the virtual table definition\n\tconst columnDefinitions = [\n\t\t...parameters.map(identifier).map(str => `${str} HIDDEN`),\n\t\t...columns.map(identifier),\n\t];\n\treturn [\n\t\t`CREATE TABLE x(${columnDefinitions.join(', ')});`,\n\t\twrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),\n\t\tparameters,\n\t\tsafeIntegers,\n\t\tdirectOnly,\n\t];\n}\n\nfunction wrapGenerator(generator, columnMap, moduleName) {\n\treturn function* virtualTable(...args) {\n\t\t/*\n\t\t\tWe must defensively clone any buffers in the arguments, because\n\t\t\totherwise the generator could mutate one of them, which would cause\n\t\t\tus to return incorrect values for hidden columns, potentially\n\t\t\tcorrupting the database.\n\t\t */\n\t\tconst output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\n\t\tfor (let i = 0; i < columnMap.size; ++i) {\n\t\t\toutput.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n\t\t}\n\t\tfor (const row of generator(...args)) {\n\t\t\tif (Array.isArray(row)) {\n\t\t\t\textractRowArray(row, output, columnMap.size, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else if (typeof row === 'object' && row !== null) {\n\t\t\t\textractRowObject(row, output, columnMap, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction extractRowArray(row, output, columnCount, moduleName) {\n\tif (row.length !== columnCount) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n\t}\n\tconst offset = output.length - columnCount;\n\tfor (let i = 0; i < columnCount; ++i) {\n\t\toutput[i + offset] = row[i];\n\t}\n}\n\nfunction extractRowObject(row, output, columnMap, moduleName) {\n\tlet count = 0;\n\tfor (const key of Object.keys(row)) {\n\t\tconst index = columnMap.get(key);\n\t\tif (index === undefined) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n\t\t}\n\t\toutput[index] = row[key];\n\t\tcount += 1;\n\t}\n\tif (count !== columnMap.size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n\t}\n}\n\nfunction inferParameters({ length }) {\n\tif (!Number.isInteger(length) || length < 0) {\n\t\tthrow new TypeError('Expected function.length to be a positive integer');\n\t}\n\tconst params = [];\n\tfor (let i = 0; i < length; ++i) {\n\t\tparams.push(`$${i + 1}`);\n\t}\n\treturn params;\n}\n\nconst { hasOwnProperty } = Object.prototype;\nconst { apply } = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*(){});\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = x => () => x;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEpCC,MAAM,CAACC,OAAO,GAAG,SAASC,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACpD;EACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIE,SAAS,CAAC,wCAAwC,CAAC;EAC3F,IAAI,CAACF,IAAI,EAAE,MAAM,IAAIE,SAAS,CAAC,qDAAqD,CAAC;;EAErF;EACA,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAI,OAAOF,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;IACpDE,SAAS,GAAG,IAAI;IAChBF,OAAO,GAAGG,KAAK,CAACC,oBAAoB,CAACJ,OAAO,EAAE,MAAM,EAAED,IAAI,CAAC,CAAC;EAC7D,CAAC,MAAM;IACN,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE,MAAM,IAAIC,SAAS,CAAC,wEAAwE,CAAC;IAChID,OAAO,GAAGK,WAAW,CAACL,OAAO,CAAC;EAC/B;EAEA,IAAI,CAACN,KAAK,CAAC,CAACY,KAAK,CAACN,OAAO,EAAED,IAAI,EAAEG,SAAS,CAAC;EAC3C,OAAO,IAAI;AACZ,CAAC;AAED,SAASG,WAAWA,CAACL,OAAO,EAAE;EAC7B,OAAO,SAASO,mBAAmBA,CAACC,UAAU,EAAEC,YAAY,EAAEC,SAAS,EAAE,GAAGC,IAAI,EAAE;IACjF,MAAMC,UAAU,GAAG;MAClBhB,MAAM,EAAEY,UAAU;MAClBK,QAAQ,EAAEJ,YAAY;MACtBH,KAAK,EAAEI;IACR,CAAC;;IAED;IACA,MAAMI,GAAG,GAAGC,KAAK,CAACC,IAAI,CAAChB,OAAO,EAAEY,UAAU,EAAED,IAAI,CAAC;IACjD,IAAI,OAAOG,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;MAC5C,MAAM,IAAIb,SAAS,CAAC,yBAAyBO,UAAU,4CAA4C,CAAC;IACrG;IAEA,OAAOJ,oBAAoB,CAACU,GAAG,EAAE,UAAU,EAAEN,UAAU,CAAC;EACzD,CAAC;AACF;AAEA,SAASJ,oBAAoBA,CAACU,GAAG,EAAEG,IAAI,EAAET,UAAU,EAAE;EACpD;EACA,IAAI,CAACU,cAAc,CAACF,IAAI,CAACF,GAAG,EAAE,MAAM,CAAC,EAAE;IACtC,MAAM,IAAIb,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,+CAA+C,CAAC;EACjH;EACA,IAAI,CAACC,cAAc,CAACF,IAAI,CAACF,GAAG,EAAE,SAAS,CAAC,EAAE;IACzC,MAAM,IAAIb,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,kDAAkD,CAAC;EACpH;;EAEA;EACA,MAAME,IAAI,GAAGL,GAAG,CAACK,IAAI;EACrB,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAIC,MAAM,CAACC,cAAc,CAACF,IAAI,CAAC,KAAKG,0BAA0B,EAAE;IAC7F,MAAM,IAAIrB,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,sFAAsF,CAAC;EACxJ;;EAEA;EACA,IAAIM,OAAO,GAAGT,GAAG,CAACS,OAAO;EACzB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,IAAI,CAAC,CAACA,OAAO,GAAG,CAAC,GAAGA,OAAO,CAAC,EAAEG,KAAK,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,EAAE;IAC3F,MAAM,IAAI1B,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,wFAAwF,CAAC;EAC1J;EACA,IAAIM,OAAO,CAACK,MAAM,KAAK,IAAIC,GAAG,CAACN,OAAO,CAAC,CAACO,IAAI,EAAE;IAC7C,MAAM,IAAI7B,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,iDAAiD,CAAC;EACnH;EACA,IAAI,CAACM,OAAO,CAACK,MAAM,EAAE;IACpB,MAAM,IAAIG,UAAU,CAAC,yBAAyBvB,UAAU,KAAKS,IAAI,uCAAuC,CAAC;EAC1G;;EAEA;EACA,IAAIe,UAAU;EACd,IAAId,cAAc,CAACF,IAAI,CAACF,GAAG,EAAE,YAAY,CAAC,EAAE;IAC3CkB,UAAU,GAAGlB,GAAG,CAACkB,UAAU;IAC3B,IAAI,CAACR,KAAK,CAACC,OAAO,CAACO,UAAU,CAAC,IAAI,CAAC,CAACA,UAAU,GAAG,CAAC,GAAGA,UAAU,CAAC,EAAEN,KAAK,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,EAAE;MACpG,MAAM,IAAI1B,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,2FAA2F,CAAC;IAC7J;EACD,CAAC,MAAM;IACNe,UAAU,GAAGC,eAAe,CAACd,IAAI,CAAC;EACnC;EACA,IAAIa,UAAU,CAACJ,MAAM,KAAK,IAAIC,GAAG,CAACG,UAAU,CAAC,CAACF,IAAI,EAAE;IACnD,MAAM,IAAI7B,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,oDAAoD,CAAC;EACtH;EACA,IAAIe,UAAU,CAACJ,MAAM,GAAG,EAAE,EAAE;IAC3B,MAAM,IAAIG,UAAU,CAAC,yBAAyBvB,UAAU,KAAKS,IAAI,wEAAwE,CAAC;EAC3I;EACA,KAAK,MAAMiB,SAAS,IAAIF,UAAU,EAAE;IACnC,IAAIT,OAAO,CAACY,QAAQ,CAACD,SAAS,CAAC,EAAE;MAChC,MAAM,IAAIjC,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,oCAAoCiB,SAAS,gEAAgE,CAAC;IAC/K;EACD;;EAEA;EACA,IAAIE,YAAY,GAAG,CAAC;EACpB,IAAIlB,cAAc,CAACF,IAAI,CAACF,GAAG,EAAE,cAAc,CAAC,EAAE;IAC7C,MAAMuB,IAAI,GAAGvB,GAAG,CAACsB,YAAY;IAC7B,IAAI,OAAOC,IAAI,KAAK,SAAS,EAAE;MAC9B,MAAM,IAAIpC,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,mFAAmF,CAAC;IACrJ;IACAmB,YAAY,GAAG,CAACC,IAAI;EACrB;;EAEA;EACA,IAAIC,UAAU,GAAG,KAAK;EACtB,IAAIpB,cAAc,CAACF,IAAI,CAACF,GAAG,EAAE,YAAY,CAAC,EAAE;IAC3CwB,UAAU,GAAGxB,GAAG,CAACwB,UAAU;IAC3B,IAAI,OAAOA,UAAU,KAAK,SAAS,EAAE;MACpC,MAAM,IAAIrC,SAAS,CAAC,yBAAyBO,UAAU,KAAKS,IAAI,iFAAiF,CAAC;IACnJ;EACD;;EAEA;EACA,MAAMsB,iBAAiB,GAAG,CACzB,GAAGP,UAAU,CAACQ,GAAG,CAACC,UAAU,CAAC,CAACD,GAAG,CAACE,GAAG,IAAI,GAAGA,GAAG,SAAS,CAAC,EACzD,GAAGnB,OAAO,CAACiB,GAAG,CAACC,UAAU,CAAC,CAC1B;EACD,OAAO,CACN,kBAAkBF,iBAAiB,CAACI,IAAI,CAAC,IAAI,CAAC,IAAI,EAClDC,aAAa,CAACzB,IAAI,EAAE,IAAI0B,GAAG,CAACtB,OAAO,CAACiB,GAAG,CAAC,CAACb,CAAC,EAAEmB,CAAC,KAAK,CAACnB,CAAC,EAAEK,UAAU,CAACJ,MAAM,GAAGkB,CAAC,CAAC,CAAC,CAAC,EAAEtC,UAAU,CAAC,EAC3FwB,UAAU,EACVI,YAAY,EACZE,UAAU,CACV;AACF;AAEA,SAASM,aAAaA,CAACG,SAAS,EAAEC,SAAS,EAAExC,UAAU,EAAE;EACxD,OAAO,UAAUyC,YAAYA,CAAC,GAAGtC,IAAI,EAAE;IACtC;AACF;AACA;AACA;AACA;AACA;IACE,MAAMuC,MAAM,GAAGvC,IAAI,CAAC6B,GAAG,CAACb,CAAC,IAAIwB,MAAM,CAACC,QAAQ,CAACzB,CAAC,CAAC,GAAGwB,MAAM,CAACE,IAAI,CAAC1B,CAAC,CAAC,GAAGA,CAAC,CAAC;IACrE,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,SAAS,CAAClB,IAAI,EAAE,EAAEgB,CAAC,EAAE;MACxCI,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACpB;IACA,KAAK,MAAMC,GAAG,IAAIR,SAAS,CAAC,GAAGpC,IAAI,CAAC,EAAE;MACrC,IAAIa,KAAK,CAACC,OAAO,CAAC8B,GAAG,CAAC,EAAE;QACvBC,eAAe,CAACD,GAAG,EAAEL,MAAM,EAAEF,SAAS,CAAClB,IAAI,EAAEtB,UAAU,CAAC;QACxD,MAAM0C,MAAM;MACb,CAAC,MAAM,IAAI,OAAOK,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;QACnDE,gBAAgB,CAACF,GAAG,EAAEL,MAAM,EAAEF,SAAS,EAAExC,UAAU,CAAC;QACpD,MAAM0C,MAAM;MACb,CAAC,MAAM;QACN,MAAM,IAAIjD,SAAS,CAAC,yBAAyBO,UAAU,mDAAmD,CAAC;MAC5G;IACD;EACD,CAAC;AACF;AAEA,SAASgD,eAAeA,CAACD,GAAG,EAAEL,MAAM,EAAEQ,WAAW,EAAElD,UAAU,EAAE;EAC9D,IAAI+C,GAAG,CAAC3B,MAAM,KAAK8B,WAAW,EAAE;IAC/B,MAAM,IAAIzD,SAAS,CAAC,yBAAyBO,UAAU,qDAAqD,CAAC;EAC9G;EACA,MAAMmD,MAAM,GAAGT,MAAM,CAACtB,MAAM,GAAG8B,WAAW;EAC1C,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,WAAW,EAAE,EAAEZ,CAAC,EAAE;IACrCI,MAAM,CAACJ,CAAC,GAAGa,MAAM,CAAC,GAAGJ,GAAG,CAACT,CAAC,CAAC;EAC5B;AACD;AAEA,SAASW,gBAAgBA,CAACF,GAAG,EAAEL,MAAM,EAAEF,SAAS,EAAExC,UAAU,EAAE;EAC7D,IAAIoD,KAAK,GAAG,CAAC;EACb,KAAK,MAAMC,GAAG,IAAIzC,MAAM,CAAC0C,IAAI,CAACP,GAAG,CAAC,EAAE;IACnC,MAAMQ,KAAK,GAAGf,SAAS,CAACgB,GAAG,CAACH,GAAG,CAAC;IAChC,IAAIE,KAAK,KAAKE,SAAS,EAAE;MACxB,MAAM,IAAIhE,SAAS,CAAC,yBAAyBO,UAAU,8CAA8CqD,GAAG,GAAG,CAAC;IAC7G;IACAX,MAAM,CAACa,KAAK,CAAC,GAAGR,GAAG,CAACM,GAAG,CAAC;IACxBD,KAAK,IAAI,CAAC;EACX;EACA,IAAIA,KAAK,KAAKZ,SAAS,CAAClB,IAAI,EAAE;IAC7B,MAAM,IAAI7B,SAAS,CAAC,yBAAyBO,UAAU,sCAAsC,CAAC;EAC/F;AACD;AAEA,SAASyB,eAAeA,CAAC;EAAEL;AAAO,CAAC,EAAE;EACpC,IAAI,CAACsC,MAAM,CAACC,SAAS,CAACvC,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;IAC5C,MAAM,IAAI3B,SAAS,CAAC,mDAAmD,CAAC;EACzE;EACA,MAAMmE,MAAM,GAAG,EAAE;EACjB,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,MAAM,EAAE,EAAEkB,CAAC,EAAE;IAChCsB,MAAM,CAACd,IAAI,CAAC,IAAIR,CAAC,GAAG,CAAC,EAAE,CAAC;EACzB;EACA,OAAOsB,MAAM;AACd;AAEA,MAAM;EAAElD;AAAe,CAAC,GAAGE,MAAM,CAACiD,SAAS;AAC3C,MAAM;EAAEtD;AAAM,CAAC,GAAGuD,QAAQ,CAACD,SAAS;AACpC,MAAM/C,0BAA0B,GAAGF,MAAM,CAACC,cAAc,CAAC,aAAW,CAAC,CAAC,CAAC;AACvE,MAAMoB,UAAU,GAAGC,GAAG,IAAI,IAAIA,GAAG,CAAC6B,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;AACxD,MAAMpE,KAAK,GAAGwB,CAAC,IAAI,MAAMA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}