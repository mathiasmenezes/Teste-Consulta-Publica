{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Highcastle\\\\Documents\\\\Cidad\\xE3o+ Consulta P\\xFAblica\\\\src\\\\contexts\\\\FormContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport toast from 'react-hot-toast';\nimport apiService from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContext = /*#__PURE__*/createContext();\nexport const useForm = () => {\n  _s();\n  const context = useContext(FormContext);\n  if (!context) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n};\n_s(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FormProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [forms, setForms] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const loadData = useCallback(async () => {\n    try {\n      const response = await apiService.getAllForms();\n      if (response.success) {\n        setForms(response.forms);\n        // Responses will be loaded per form when needed\n        setResponses([]);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n    }\n  }, []);\n\n  // Load data from database on mount\n  useEffect(() => {\n    // Only load data if we have authentication (token exists)\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadData();\n    }\n  }, [loadData]);\n  const createForm = useCallback(async formData => {\n    setLoading(true);\n    try {\n      const response = await apiService.createForm(formData);\n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        toast.success('Formulário criado com sucesso!');\n        return {\n          success: true,\n          formId: response.form.id\n        };\n      }\n    } catch (error) {\n      toast.error('Falha ao criar formulário');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const updateForm = useCallback(async (formId, formData) => {\n    setLoading(true);\n    try {\n      const response = await apiService.updateForm(formId, formData);\n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        toast.success('Formulário atualizado com sucesso!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error('Falha ao atualizar formulário');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const deleteForm = useCallback(async formId => {\n    setLoading(true);\n    try {\n      const response = await apiService.deleteForm(formId);\n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        toast.success('Formulário deletado com sucesso!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error('Falha ao deletar formulário');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getFormById = useCallback(async formId => {\n    try {\n      const response = await apiService.getFormById(formId);\n      if (response.success) {\n        return response.form;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao obter formulário:', error);\n      return null;\n    }\n  }, []);\n  const submitResponse = useCallback(async (formId, responseData) => {\n    setLoading(true);\n    try {\n      const response = await apiService.submitResponse(formId, responseData);\n      if (response.success) {\n        toast.success('Resposta enviada com sucesso!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error('Falha ao enviar resposta');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getFormResponses = useCallback(async formId => {\n    try {\n      const response = await apiService.getFormResponses(formId);\n      if (response.success) {\n        setResponses(response.responses);\n        return response.responses;\n      }\n      return [];\n    } catch (error) {\n      console.error('Erro ao obter respostas do formulário:', error);\n      return [];\n    }\n  }, []);\n  const getActiveForms = useCallback(async () => {\n    try {\n      const response = await apiService.getActiveForms();\n      if (response.success) {\n        return response.forms;\n      }\n      return [];\n    } catch (error) {\n      console.error('Erro ao obter formulários ativos:', error);\n      return [];\n    }\n  }, []);\n  const getFormResponseCount = useCallback(async formId => {\n    try {\n      const response = await apiService.getFormResponseCount(formId);\n      return response.count || 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de respostas:', error);\n      return 0;\n    }\n  }, []);\n  const getStatistics = useCallback(async () => {\n    try {\n      const response = await apiService.getStatistics();\n      return response.stats || {\n        totalUsers: 0,\n        totalForms: 0,\n        totalResponses: 0,\n        activeForms: 0\n      };\n    } catch (error) {\n      console.error('Erro ao obter estatísticas:', error);\n      return {\n        totalUsers: 0,\n        totalForms: 0,\n        totalResponses: 0,\n        activeForms: 0\n      };\n    }\n  }, []);\n  const hasUserResponded = useCallback(async (formId, userId) => {\n    try {\n      const response = await apiService.hasUserResponded(formId, userId);\n      return response.hasResponded;\n    } catch (error) {\n      console.error('Erro ao verificar resposta do usuário:', error);\n      return false;\n    }\n  }, []);\n  const exportResponses = useCallback(async (formId, format = 'csv') => {\n    try {\n      const response = await apiService.exportResponses(formId, format);\n      if (response.success) {\n        // Create and download the file\n        const blob = new Blob([response.data], {\n          type: 'text/csv'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `form-responses-${formId}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        toast.success('Respostas exportadas com sucesso!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      toast.error('Falha ao exportar respostas');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }, []);\n  const value = {\n    forms,\n    responses,\n    loading,\n    createForm,\n    updateForm,\n    deleteForm,\n    getFormById,\n    submitResponse,\n    getFormResponses,\n    getActiveForms,\n    getFormResponseCount,\n    getStatistics,\n    hasUserResponded,\n    exportResponses,\n    loadData\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s2(FormProvider, \"nefqJe1dISfvsLlm/3pHj04h8RQ=\", false, function () {\n  return [useAuth];\n});\n_c = FormProvider;\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","toast","apiService","useAuth","jsxDEV","_jsxDEV","FormContext","useForm","_s","context","Error","FormProvider","children","_s2","currentUser","forms","setForms","responses","setResponses","loading","setLoading","loadData","response","getAllForms","success","error","console","token","localStorage","getItem","createForm","formData","updatedResponse","formId","form","id","message","updateForm","deleteForm","getFormById","submitResponse","responseData","getFormResponses","getActiveForms","getFormResponseCount","count","getStatistics","stats","totalUsers","totalForms","totalResponses","activeForms","hasUserResponded","userId","hasResponded","exportResponses","format","blob","Blob","data","type","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/src/contexts/FormContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport toast from 'react-hot-toast';\nimport apiService from '../services/api';\nimport { useAuth } from './AuthContext';\n\nconst FormContext = createContext();\n\nexport const useForm = () => {\n  const context = useContext(FormContext);\n  if (!context) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n};\n\nexport const FormProvider = ({ children }) => {\n  const { currentUser } = useAuth();\n  const [forms, setForms] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const loadData = useCallback(async () => {\n    try {\n      const response = await apiService.getAllForms();\n      if (response.success) {\n        setForms(response.forms);\n        // Responses will be loaded per form when needed\n        setResponses([]);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n    }\n  }, []);\n\n  // Load data from database on mount\n  useEffect(() => {\n    // Only load data if we have authentication (token exists)\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadData();\n    }\n  }, [loadData]);\n\n  const createForm = useCallback(async (formData) => {\n    setLoading(true);\n    try {\n      const response = await apiService.createForm(formData);\n      \n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        toast.success('Formulário criado com sucesso!');\n        return { success: true, formId: response.form.id };\n      }\n    } catch (error) {\n      toast.error('Falha ao criar formulário');\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateForm = useCallback(async (formId, formData) => {\n    setLoading(true);\n    try {\n      const response = await apiService.updateForm(formId, formData);\n      \n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        \n        toast.success('Formulário atualizado com sucesso!');\n        return { success: true };\n      }\n    } catch (error) {\n      toast.error('Falha ao atualizar formulário');\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteForm = useCallback(async (formId) => {\n    setLoading(true);\n    try {\n      const response = await apiService.deleteForm(formId);\n      \n      if (response.success) {\n        // Reload forms to get the updated list\n        const updatedResponse = await apiService.getAllForms();\n        if (updatedResponse.success) {\n          setForms(updatedResponse.forms);\n        }\n        \n        toast.success('Formulário deletado com sucesso!');\n        return { success: true };\n      }\n    } catch (error) {\n      toast.error('Falha ao deletar formulário');\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const getFormById = useCallback(async (formId) => {\n    try {\n      const response = await apiService.getFormById(formId);\n      if (response.success) {\n        return response.form;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao obter formulário:', error);\n      return null;\n    }\n  }, []);\n\n  const submitResponse = useCallback(async (formId, responseData) => {\n    setLoading(true);\n    try {\n      const response = await apiService.submitResponse(formId, responseData);\n      \n      if (response.success) {\n        toast.success('Resposta enviada com sucesso!');\n        return { success: true };\n      }\n    } catch (error) {\n      toast.error('Falha ao enviar resposta');\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const getFormResponses = useCallback(async (formId) => {\n    try {\n      const response = await apiService.getFormResponses(formId);\n      if (response.success) {\n        setResponses(response.responses);\n        return response.responses;\n      }\n      return [];\n    } catch (error) {\n      console.error('Erro ao obter respostas do formulário:', error);\n      return [];\n    }\n  }, []);\n\n  const getActiveForms = useCallback(async () => {\n    try {\n      const response = await apiService.getActiveForms();\n      if (response.success) {\n        return response.forms;\n      }\n      return [];\n    } catch (error) {\n      console.error('Erro ao obter formulários ativos:', error);\n      return [];\n    }\n  }, []);\n\n  const getFormResponseCount = useCallback(async (formId) => {\n    try {\n      const response = await apiService.getFormResponseCount(formId);\n      return response.count || 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de respostas:', error);\n      return 0;\n    }\n  }, []);\n\n  const getStatistics = useCallback(async () => {\n    try {\n      const response = await apiService.getStatistics();\n      return response.stats || { totalUsers: 0, totalForms: 0, totalResponses: 0, activeForms: 0 };\n    } catch (error) {\n      console.error('Erro ao obter estatísticas:', error);\n      return { totalUsers: 0, totalForms: 0, totalResponses: 0, activeForms: 0 };\n    }\n  }, []);\n\n  const hasUserResponded = useCallback(async (formId, userId) => {\n    try {\n      const response = await apiService.hasUserResponded(formId, userId);\n      return response.hasResponded;\n    } catch (error) {\n      console.error('Erro ao verificar resposta do usuário:', error);\n      return false;\n    }\n  }, []);\n\n  const exportResponses = useCallback(async (formId, format = 'csv') => {\n    try {\n      const response = await apiService.exportResponses(formId, format);\n      if (response.success) {\n        // Create and download the file\n        const blob = new Blob([response.data], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `form-responses-${formId}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        toast.success('Respostas exportadas com sucesso!');\n        return { success: true };\n      }\n    } catch (error) {\n      toast.error('Falha ao exportar respostas');\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const value = {\n    forms,\n    responses,\n    loading,\n    createForm,\n    updateForm,\n    deleteForm,\n    getFormById,\n    submitResponse,\n    getFormResponses,\n    getActiveForms,\n    getFormResponseCount,\n    getStatistics,\n    hasUserResponded,\n    exportResponses,\n    loadData\n  };\n\n  return (\n    <FormContext.Provider value={value}>\n      {children}\n    </FormContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}