{"ast":null,"code":"'use strict';\n\nconst {\n  getBooleanOption,\n  cppdb\n} = require('../util');\nmodule.exports = function pragma(source, options) {\n  if (options == null) options = {};\n  if (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\n  if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n  const simple = getBooleanOption(options, 'simple');\n  const stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\n  return simple ? stmt.pluck().get() : stmt.all();\n};","map":{"version":3,"names":["getBooleanOption","cppdb","require","module","exports","pragma","source","options","TypeError","simple","stmt","prepare","pluck","get","all"],"sources":["C:/Users/Highcastle/Documents/Cidadão+ Consulta Pública/node_modules/better-sqlite3/lib/methods/pragma.js"],"sourcesContent":["'use strict';\nconst { getBooleanOption, cppdb } = require('../util');\n\nmodule.exports = function pragma(source, options) {\n\tif (options == null) options = {};\n\tif (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\tconst simple = getBooleanOption(options, 'simple');\n\n\tconst stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\n\treturn simple ? stmt.pluck().get() : stmt.all();\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAAEA,gBAAgB;EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEtDC,MAAM,CAACC,OAAO,GAAG,SAASC,MAAMA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACjD,IAAIA,OAAO,IAAI,IAAI,EAAEA,OAAO,GAAG,CAAC,CAAC;EACjC,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE,MAAM,IAAIE,SAAS,CAAC,wCAAwC,CAAC;EAC7F,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE,MAAM,IAAIC,SAAS,CAAC,kDAAkD,CAAC;EACxG,MAAMC,MAAM,GAAGT,gBAAgB,CAACO,OAAO,EAAE,QAAQ,CAAC;EAElD,MAAMG,IAAI,GAAG,IAAI,CAACT,KAAK,CAAC,CAACU,OAAO,CAAC,UAAUL,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;EAChE,OAAOG,MAAM,GAAGC,IAAI,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}